VIGAS TIMOSHENKO - MULTIPLICADORES  DE LAGRANGE
Espesor Uniforme - Isotropía - Condiciones de bordes elásticas y rótula intermedia
06/10/06
Utilizamos la base 1,x,x^2... 
Analisis Dinámico: FUNCIONA
Corregido a media para aplicar Lagrange con rótula y restriccines elásticas intermedias
(Ver Paper "Free Vibration of Multi-span Timoshenko Beams using static Timoshenko Beams functions" Journal of sound and vibrations, D. Zhou)
Aproxima la Funcion Wtotal y Phi de flexión.


> restart; a:= : Digits:=a: 
> with(linalg):

Warning, the protected names norm and trace have been redefined and unprotected

Archivo para escribir los resultados

> res:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/ISOTROPA/PSk 4.csv",WRITE,TEXT);
> writestat(res,'n','m','r','Frecuencia'):
Error, (in fopen) file or directory does not exist

Números de Polinomios en cada Dirección (se supone la misma cantidad en las dos direcciones)
> n:=7:  # Dirección Girof
> m:=n:  # Dirección W
> writestat(res,"n =",n,"m =",m,"Digitos=",a):

Datos
Longitud de la viga(ojo con los datos)
> nu:=0.30:
> alpha:=0.1: ks:=5/6:  Gamma:=ks/(2*(1.0+nu)): # Gamma:=1/5; #alpha=r/l: 
> #alpha:=0.002: ks:=0.866666667:  Gamma:=ks/(2*(1.0+nu)): # Gamma:=1/5; #alpha=r/l: 

> l:=1.0:                r:=alpha/(12)^0.5; r*12^0.5/l:
             r := 0.0288675134594812882254574390251
Constantes de los Resortes en los bordes de la viga
> T1:=0; :T2:=0;     R1:=0;  R2:=0;
> #T1:=1.; :T2:=10.;     R1:=100.0;  R2:=0;
> #T1:=10.0^8;T2:=10.0^3;R1:=100.0;R2:=0;
                            T1 := 0
                            T2 := 0
                            R1 := 0
                            R2 := 0
> writestat(res,"T1",T1,"T2",T2,"R1",R1,"R2",R2):
Ubicación del Resorte Intermedio
> c[1]:=0.5: 
> Tc:=0; Rc:=0;
> R12:=1000:
                            Tc := 0
                            Rc := 0
Condiciones de Borde de la Viga (  w1:Desplazamiento por flexion 1 tramo, w2:Desplazamiento por flexión 2 tramo) 
> c1:=c[1]:
> writestat(res,"c",c1,"k",ks,"h/l",alpha):
Condiciones de controno:  1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF- 6 ->FS  
> ccf1:=2:  #(W tramo 1)
> ccg1:=5:  #(Phi tramo 1)
> ccf2:=6: #(W tramo 2)
> ccg2:=5: #(Phi tramo 2)
Condicines impuestas por los multiplicadores de Lagrange(L=1 para el caso de vigas con articulacion)
> L:=1: #Cantidad de condiciones


Subrutina para determinar las condiciones de contorno(xb: determina el que borde estamos: 0,1)
ccc = 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF 
> calccc := proc( cc,p,x1,x2)
> if (cc=1) then:
> p[1]:=(x-x1)*(x-x2):
> elif (cc=2) then: 
> p[1]:=(x-x1):
> elif (cc=3) then: 
> p[1]:=(x-x1)^2:
> elif (cc=4) then: 
> p[1]:=(x-x1)^2*(x-x2):
> elif(cc=5) then:
> p[1]:=1:
> elif(cc=6) then:
> p[1]:=(x2-x):
> end if:
> return p:
> end proc:
Subrutina para calcular los polinomios simples
> calcps := proc( pp1,nn,p,p0,p1,px,px0,px1,pxx,x1,x2) global i:
>   p[1]:=pp1:
>   p0[1]:=subs(x=x1,p[1]);
>   p1[1]:=subs(x=x2,p[1]);
>   for i from 2 by 1 to nn do:
>      p[i]:=expand(p[i-1]*x):
>      p0[i]:=subs(x=x1,p[i]);
              p1[i]:=subs(x=x2,p[i]):
>   end do:
>   for i from 1 by 1 to n do:
>      px[i]:=diff(p[i],x): pxx[i]:=diff(p[i],x$2): 
>      px0[i]:=subs(x=x1,px[i]);px1[i]:=subs(x=x2,px[i]):
>   end do:
>   return p,p0,p1,px,px0,px1,pxx
> end proc:
ccf1: indica la condición de contorno de Wf en el primer tramo: 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF  
1 Tramo: 
> x1:=0: x2:=c1:
> calccc( ccf1,w1,x1,x2):
> calcps (w1[1],n,w1,w10,w11,w1x,w1x0,w1x1,w1xx,x1,x2):
> calccc( ccg1,phi1,x1,x2):
> calcps (phi1[1],m,phi1,phi10,phi11,phi1x,phi1x0,phi1x1,phi1xx,x1,x2):
> print(phi1);print(phi10);print(phi11);
> print(w1);print(w10);print(w11);
      /[                   2       4       3       6       5]\
 TABLE\[1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ]/
    TABLE([1 = 1, 2 = 0, 3 = 0, 5 = 0, 4 = 0, 7 = 0, 6 = 0])
TABLE([1 = 1, 2 = 0.5, 3 = 0.25, 5 = 0.0625, 4 = 0.125, 7 = 0.015625, 

  6 = 0.03125])
      /[            2       3       5       4       7       6]\
 TABLE\[1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ]/
    TABLE([1 = 0, 2 = 0, 3 = 0, 5 = 0, 4 = 0, 7 = 0, 6 = 0])
TABLE([1 = 0.5, 2 = 0.25, 3 = 0.125, 5 = 0.03125, 4 = 0.0625, 7 = 0.0078125, 

  6 = 0.015625])
ccf2: indica la condición de contorno de Wf en el segundo tramo: 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF  
2 Tramo: 
> x1:=c1: x2:=1:
> calccc( ccf2,w2,x1,x2):
> calcps (w2[1],n,w2,w20,w21,w2x,w2x0,w2x1,w2xx,x1,x2):
> calccc( ccg2,phi2,x1,x2):
> calcps (phi2[1],m,phi2,phi20,phi21,phi2x,phi2x0,phi2x1,phi2xx,x1,x2):
> print(phi1);print(phi2);print(phi21);
> print(w1); print(w2);
> #print(w1);print(w1x);print(w21);
      /[                   2       4       3       6       5]\
 TABLE\[1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ]/
      /[                   2       4       3       6       5]\
 TABLE\[1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ]/
    TABLE([1 = 1, 2 = 1, 3 = 1, 5 = 1, 4 = 1, 7 = 1, 6 = 1])
      /[            2       3       5       4       7       6]\
 TABLE\[1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ]/
     /[                    2       2    3       4    5       3    4  
TABLE\[1 = 1 - x, 2 = x - x , 3 = x  - x , 5 = x  - x , 4 = x  - x , 

       6    7       5    6]\
  7 = x  - x , 6 = x  - x ]/
Energía ( Forma Lineal) 
> print(phi1); print(phi2);
      /[                   2       4       3       6       5]\
 TABLE\[1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ]/
      /[                   2       4       3       6       5]\
 TABLE\[1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ]/
Matrices de masa de cada tramo 
> E:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do;
>    for j from 1 by 1 to n do;
>       E[i,j,1]:=int((r/l)^2*phi1[j]*phi1[i],x=0..c[1]):
>       E[i,j,2]:=int((r/l)^2*phi2[j]*phi2[i],x=c[1]..l):
>    end do;
> end do;
> F:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>       F[i,j,1]:=int(w1[j]*w1[i],x=0..c[1]):
>       F[i,j,2]:=int(w2[j]*w2[i],x=c[1]..1):
>    end do:
> end do:
> #print(F);
MM: Matriz que multiplica al autovalor: Matriz de Masa
> M:=array(1..n+m,1..n+m,1..2):
> for i from 1 by 1 to n+m do:
>    for j from 1 by 1 to n+m do:
>       M[i,j,1]:=0:  M[i,j,2]:=0:  
>    end do:
> end do:
> for t from 1 by 1 to 2 do:
>    for i from 1 by 1 to n+m do:
>      if (i<=n) then:
>        for j from 1 by 1 to n+m do:                 
>           if (j<=n) then:
>              M[i,j,t]:=E[i,j,t]:
>           end if:
>        end do:  
>      else:
>        for j from 1 by 1 to n+m do:
>          if (j>n) then:
>              M[i,j,t]:=F[i-n,j-n,t]:
>          end if:
>        end do:
>      end if:
>    end do:
> end do:
> #print(E); print(M);
> 
MM
> MM:=array(1..2*(n+m)+L,1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do:
>   for j from 1 by 1 to 2*(n+m)+L do:
>      MM[i,j]:=0:  
>   end do:
> end do:
> for i from 1 by 1 to 2*(n+m) do:
>   for j from 1 by 1 to 2*(n+m) do:
>      if (i<=(n+m)) then:                     
>         if (j<=(n+m)) then:
>            MM[i,j]:=M[i,j,1]:
>         end if:
>      else
>         if (j>(n+m)) then:
>            MM[i,j]:=M[i-(n+m),j-(n+m),2]:
>         end if:  
>      end if:
>   end do:
> end do:
> #print(MM);print(F);
Prueba:
> for i from 1 by 1 to n+m do;
>   for j from 1 by 1 to n+m do;
>      t:=i+j:
>      v1[t]:=is(MM[i,j]=M[i,j,1]);  
>      v2[t]:=is(MM[i+n+m,j+n+m]=M[i,j,2]);  
>   end do;
> end do;
> #print(v1);print(v2);
> print(w1);print(w1x);
      /[            2       3       5       4       7       6]\
 TABLE\[1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ]/
     /[                       2         4         3         6         5]\
TABLE\[1 = 1, 2 = 2 x, 3 = 3 x , 5 = 5 x , 4 = 4 x , 7 = 7 x , 6 = 6 x ]/
Matrices de rigidez de cada tramo
Denxn
> De:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do:
>    for j from 1 by 1 to n do:
>     De[i,j,1]:=int(Gamma*(l/r)^2*w1x[i]*w1x[j],x=0..c[1])+T1*w10[j]*w10[i]+Tc*w11[j]*w11[i]:               
>     De[i,j,2]:=int(Gamma*(l/r)^2*w2x[i]*w2x[j],x=c[1]..1)+T2*w21[j]*w21[i]:
>    end do:
> end do:
Bmxm
> B:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>       B[i,j,1]:=int(Gamma*(l/r)^2*w1x[j]*phi1[i],x=0..c[1]):
>       B[i,j,2]:=int(Gamma*(l/r)^2*w2x[j]*phi2[i],x=c[1]..1):
>    end do:
> end do:
Cnxn
> C:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do:
>    for j from 1 by 1 to n do:
>       C[i,j,1]:=int(Gamma*(l/r)^2*w1x[i]*phi1[j],x=0..c[1]):
>       C[i,j,2]:=int(Gamma*(l/r)^2*w2x[i]*phi2[j],x=c[1]..1):
>    end do:
> end do:
Amxm
> A:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>        A[i,j,1]:=int(Gamma*(l/r)^2*phi1[j]*phi1[i]+phi1x[j]*phi1x[i],x=0..c[1]):
>        A[i,j,1]:=A[i,j,1]+R1*phi10[j]*phi10[i]+Rc*phi11[j]*phi11[i]+R12*phi11[i]*phi11[j]:          
>        A[i,j,2]:=int(Gamma*(l/r)^2*phi2[i]*phi2[j]+phi2x[i]*phi2x[j],x=c[1]..1):
>        A[i,j,2]:=A[i,j,2]+R2*phi21[i]*phi21[j]+R12*phi20[i]*phi20[j]:
>    end do:
> end do:
AAmxm
> AA:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>        AA[i,j,1]:=-R12*phi11[i]*phi20[j]:
>        AA[i,j,2]:=-R12*phi11[j]*phi20[i]:
>    end do:
> end do:
> print(phi11);print(phi20);
TABLE([1 = 1, 2 = 0.5, 3 = 0.25, 5 = 0.0625, 4 = 0.125, 7 = 0.015625, 

  6 = 0.03125])
TABLE([1 = 1, 2 = 0.5, 3 = 0.25, 5 = 0.0625, 4 = 0.125, 7 = 0.015625, 

  6 = 0.03125])
> #print(AA);
KK: Matriz de Rigidez total
> K1:=array(1..(n+m),1..(n+m),1..2):
> for t from 1 by 1 to 2 do:
>    for i from 1 by 1 to n+m do:
>       if (i<=n) then:
>          for j from 1 by 1 to n+m do:  
>             if (j<=n) then:
>                 K1[i,j,t]:=A[i,j,t]:
>             else:
>                 K1[i,j,t]:=B[i,j-n,t]:
>             end if:
>          end do:
>        else:
>          for j from 1 by 1 to n+m do:
>            if (j<=n) then:
>                K1[i,j,t]:=C[i-n,j,t]:
>            else:
>                K1[i,j,t]:=De[i-n,j-n,t]:
>            end if:
>          end do:
>       end if:
>    end do:
> end do:
> #print(K1);
Prueba:
> t:=0:
> for i from 1 by 1 to n do;
>   for j from 1 by 1 to n do;     
>      t:=t+1:
>      v11[t]:=is(K1[i,j,1]=A[i,j,1]);  
>      v22[t]:=is(K1[i,j+n,1]=B[i,j,1]);  
>      v33[t]:=is(K1[i+n,j,2]=C[i,j,2]);  
>      v44[t]:=is(K1[i+n,j+n,2]=De[i,j,2]);  
>   end do;
> end do;
> #print(v11);print(v22);print(v33);print(v44);
KK
> KK:=array(1..2*(n+m)+L,1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do:
>   for j from 1 by 1 to 2*(n+m)+L do:
>      KK[i,j]:=0:  
>   end do:
> end do:
> for i from 1 by 1 to 2*(n+m) do:
>    if (i<=(n+m)) then:
>        for j from 1 by 1 to 2*(n+m) do:                 
>           if (j<=(n+m)) then:
>              KK[i,j]:=K1[i,j,1]:
>           end if:
>         end do:  
>    else:
>        for j from 1 by 1 to 2*(n+m) do:
>           if (j>(n+m)) then:
>              KK[i,j]:=K1[i-(n+m),j-(n+m),2]:
>           end if:
>        end do:
>    end if:
>    for j from 1 by 1 to 2*(n+m) do:                 
>        if (i<=n) then:
>           if (j>n+m and j<=2*n+m) then:
>              KK[i,j]:=AA[i,j-(n+m),1]:
>           end if:
>        end if: 
>        if (i > (n+m) and i <= 2*n+m ) then:
>           if (j<=n) then:
>              KK[i,j]:=AA[i-(n+m),j,2]:
>           end if:
>        end if:
>     end do:   
> end do:
> 
> print(w11);print(w20);
TABLE([1 = 0.5, 2 = 0.25, 3 = 0.125, 5 = 0.03125, 4 = 0.0625, 7 = 0.0078125, 

  6 = 0.015625])
TABLE([1 = 0.5, 2 = 0.25, 3 = 0.125, 5 = 0.03125, 4 = 0.0625, 7 = 0.0078125, 

  6 = 0.015625])
> #print(KK);
Condiciones impuesta por los multiplicadores 1 fila por cada condición extra
> for i from 1 by 1 to n do:
Esta condición vale para cuando existe rótula 
>       KK[2*(n+m)+1,i+m]:=w11[i]:
>       KK[2*(n+m)+1,i+2*m+n]:=-w20[i]:
>       KK[i+m,2*(n+m)+1]:=w11[i]:
>       KK[i+2*m+n,2*(n+m)+1]:=-w20[i]:
      Esta condicion vale para reproducir dos span.
>       #KK[2*(n+m)+1,i]:=phi11[i]:
>       #KK[2*(n+m)+1,i+m+n]:=-phi20[i]:
>       #KK[i,2*(n+m)+1]:=phi11[i]:
>       #KK[i+m+n,2*(n+m)+1]:=-phi20[i]:
> end do:
> print(w11);print(w20);
> print(phi11);print(phi20);
TABLE([1 = 0.5, 2 = 0.25, 3 = 0.125, 5 = 0.03125, 4 = 0.0625, 7 = 0.0078125, 

  6 = 0.015625])
TABLE([1 = 0.5, 2 = 0.25, 3 = 0.125, 5 = 0.03125, 4 = 0.0625, 7 = 0.0078125, 

  6 = 0.015625])
TABLE([1 = 1, 2 = 0.5, 3 = 0.25, 5 = 0.0625, 4 = 0.125, 7 = 0.015625, 

  6 = 0.03125])
TABLE([1 = 1, 2 = 0.5, 3 = 0.25, 5 = 0.0625, 4 = 0.125, 7 = 0.015625, 

  6 = 0.03125])
> #for i from 1 by 1 to 2*(n+m)+L do:
>  #  for j from 1 by 1 to 2*(n+m)+L do:
>   #   if(is(KK[i,j]=KK[j,i])=true) then
>    #  else
>     #     print(KK[i,j],i,j);
>      #end if:
>    #end do:
> #end do:
> #print(AA);
Calculo de Autovalores y Autovectores
> #print(phi2);
> print(KK);
[Typesetting:-mtable(Typesetting:-mtr(

  Typesetting:-mtd(1192.30769230769230769230769231), 

  Typesetting:-mtd(548.076923076923076923076923077), 

  Typesetting:-mtd(266.025641025641025641025641026), 

  Typesetting:-mtd(131.009615384615384615384615385), 

  Typesetting:-mtd(64.9038461538461538461538461538), 

  Typesetting:-mtd(32.2516025641025641025641025641), 

  Typesetting:-mtd(16.0542582417582417582417582418), 

  Typesetting:-mtd(192.307692307692307692307692308), 

  Typesetting:-mtd(96.1538461538461538461538461540), 

  Typesetting:-mtd(48.0769230769230769230769230771), 

  Typesetting:-mtd(24.0384615384615384615384615384), 

  Typesetting:-mtd(12.0192307692307692307692307692), 

  Typesetting:-mtd(6.00961538461538461538461538464), 

  Typesetting:-mtd(3.00480769230769230769230769231), 

  Typesetting:-mtd(&minus;1000), Typesetting:-mtd(&uminus0;500.0), 

  Typesetting:-mtd(&uminus0;250.00), Typesetting:-mtd(&uminus0;125.000), 

  Typesetting:-mtd(&uminus0;62.5000), Typesetting:-mtd(&uminus0;31.25000), 

  Typesetting:-mtd(&uminus0;15.625000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0)), Typesetting:-mtr(

  Typesetting:-mtd(548.076923076923076923076923077), 

  Typesetting:-mtd(266.525641025641025641025641026), 

  Typesetting:-mtd(131.259615384615384615384615385), 

  Typesetting:-mtd(65.0288461538461538461538461538), 

  Typesetting:-mtd(32.3141025641025641025641025641), 

  Typesetting:-mtd(16.0855082417582417582417582418), 

  Typesetting:-mtd(8.01592548076923076923076923077), 

  Typesetting:-mtd(48.0769230769230769230769230770), 

  Typesetting:-mtd(32.0512820512820512820512820513), 

  Typesetting:-mtd(18.0288461538461538461538461539), 

  Typesetting:-mtd(9.61538461538461538461538461538), 

  Typesetting:-mtd(5.00801282051282051282051282052), 

  Typesetting:-mtd(2.57554945054945054945054945056), 

  Typesetting:-mtd(1.31460336538461538461538461539), 

  Typesetting:-mtd(&uminus0;500.0), Typesetting:-mtd(&uminus0;250.00), 

  Typesetting:-mtd(&uminus0;125.000), Typesetting:-mtd(&uminus0;62.5000), 

  Typesetting:-mtd(&uminus0;31.25000), Typesetting:-mtd(&uminus0;15.625000), 

  Typesetting:-mtd(&uminus0;7.8125000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0)), Typesetting:-mtr(

  Typesetting:-mtd(266.025641025641025641025641026), 

  Typesetting:-mtd(131.259615384615384615384615385), 

  Typesetting:-mtd(65.0705128205128205128205128205), 

  Typesetting:-mtd(32.3453525641025641025641025641), 

  Typesetting:-mtd(16.1042582417582417582417582418), 

  Typesetting:-mtd(8.02634214743589743589743589744), 

  Typesetting:-mtd(4.00310973748473748473748473748), 

  Typesetting:-mtd(16.0256410256410256410256410257), 

  Typesetting:-mtd(12.0192307692307692307692307692), 

  Typesetting:-mtd(7.21153846153846153846153846156), 

  Typesetting:-mtd(4.00641025641025641025641025641), 

  Typesetting:-mtd(2.14629120879120879120879120879), 

  Typesetting:-mtd(1.12680288461538461538461538462), 

  Typesetting:-mtd(0.584268162393162393162393162394), 

  Typesetting:-mtd(&uminus0;250.00), Typesetting:-mtd(&uminus0;125.000), 

  Typesetting:-mtd(&uminus0;62.5000), Typesetting:-mtd(&uminus0;31.25000), 

  Typesetting:-mtd(&uminus0;15.625000), Typesetting:-mtd(&uminus0;7.8125000), 

  Typesetting:-mtd(&uminus0;3.90625000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0)), Typesetting:-mtr(

  Typesetting:-mtd(131.009615384615384615384615385), 

  Typesetting:-mtd(65.0288461538461538461538461538), 

  Typesetting:-mtd(32.3453525641025641025641025641), 

  Typesetting:-mtd(16.1105082417582417582417582418), 

  Typesetting:-mtd(8.03155048076923076923076923077), 

  Typesetting:-mtd(4.00645795177045177045177045177), 

  Typesetting:-mtd(1.99947415865384615384615384615), 

  Typesetting:-mtd(6.00961538461538461538461538462), 

  Typesetting:-mtd(4.80769230769230769230769230770), 

  Typesetting:-mtd(3.00480769230769230769230769232), 

  Typesetting:-mtd(1.71703296703296703296703296703), 

  Typesetting:-mtd(0.939002403846153846153846153848), 

  Typesetting:-mtd(0.500801282051282051282051282053), 

  Typesetting:-mtd(0.262920673076923076923076923077), 

  Typesetting:-mtd(&uminus0;125.000), Typesetting:-mtd(&uminus0;62.5000), 

  Typesetting:-mtd(&uminus0;31.25000), Typesetting:-mtd(&uminus0;15.625000), 

  Typesetting:-mtd(&uminus0;7.8125000), Typesetting:-mtd(&uminus0;3.90625000), 

  Typesetting:-mtd(&uminus0;1.953125000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0)), Typesetting:-mtr(

  Typesetting:-mtd(64.9038461538461538461538461538), 

  Typesetting:-mtd(32.3141025641025641025641025641), 

  Typesetting:-mtd(16.1042582417582417582417582418), 

  Typesetting:-mtd(8.03155048076923076923076923077), 

  Typesetting:-mtd(4.00757402319902319902319902320), 

  Typesetting:-mtd(2.00045072115384615384615384615), 

  Typesetting:-mtd(0.998843604312354312354312354312), 

  Typesetting:-mtd(2.40384615384615384615384615385), 

  Typesetting:-mtd(2.00320512820512820512820512821), 

  Typesetting:-mtd(1.28777472527472527472527472528), 

  Typesetting:-mtd(0.751201923076923076923076923076), 

  Typesetting:-mtd(0.417334401709401709401709401710), 

  Typesetting:-mtd(0.225360576923076923076923076924), 

  Typesetting:-mtd(0.119509396853146853146853146853), 

  Typesetting:-mtd(&uminus0;62.5000), Typesetting:-mtd(&uminus0;31.25000), 

  Typesetting:-mtd(&uminus0;15.625000), Typesetting:-mtd(&uminus0;7.8125000), 

  Typesetting:-mtd(&uminus0;3.90625000), 

  Typesetting:-mtd(&uminus0;1.953125000), 

  Typesetting:-mtd(&uminus0;.9765625000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0)), Typesetting:-mtr(

  Typesetting:-mtd(32.2516025641025641025641025641), 

  Typesetting:-mtd(16.0855082417582417582417582418), 

  Typesetting:-mtd(8.02634214743589743589743589744), 

  Typesetting:-mtd(4.00645795177045177045177045177), 

  Typesetting:-mtd(2.00045072115384615384615384615), 

  Typesetting:-mtd(0.999060618201243201243201243201), 

  Typesetting:-mtd(0.499035957532051282051282051282), 

  Typesetting:-mtd(1.00160256410256410256410256410), 

  Typesetting:-mtd(0.858516483516483516483516483518), 

  Typesetting:-mtd(0.563401442307692307692307692310), 

  Typesetting:-mtd(0.333867521367521367521367521367), 

  Typesetting:-mtd(0.187800480769230769230769230770), 

  Typesetting:-mtd(0.102436625874125874125874125874), 

  Typesetting:-mtd(0.0547751402243589743589743589744), 

  Typesetting:-mtd(&uminus0;31.25000), Typesetting:-mtd(&uminus0;15.625000), 

  Typesetting:-mtd(&uminus0;7.8125000), Typesetting:-mtd(&uminus0;3.90625000), 

  Typesetting:-mtd(&uminus0;1.953125000), 

  Typesetting:-mtd(&uminus0;.9765625000), 

  Typesetting:-mtd(&uminus0;.48828125000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0)), Typesetting:-mtr(

  Typesetting:-mtd(16.0542582417582417582417582418), 

  Typesetting:-mtd(8.01592548076923076923076923077), 

  Typesetting:-mtd(4.00310973748473748473748473748), 

  Typesetting:-mtd(1.99947415865384615384615384615), 

  Typesetting:-mtd(0.998843604312354312354312354312), 

  Typesetting:-mtd(0.499035957532051282051282051282), 

  Typesetting:-mtd(0.249350184070736955352339967725), 

  Typesetting:-mtd(0.429258241758241758241758241759), 

  Typesetting:-mtd(0.375600961538461538461538461539), 

  Typesetting:-mtd(0.250400641025641025641025641026), 

  Typesetting:-mtd(0.150240384615384615384615384615), 

  Typesetting:-mtd(0.0853638548951048951048951048952), 

  Typesetting:-mtd(0.0469501201923076923076923076925), 

  Typesetting:-mtd(0.0252808339497041420118343195266), 

  Typesetting:-mtd(&uminus0;15.625000), Typesetting:-mtd(&uminus0;7.8125000), 

  Typesetting:-mtd(&uminus0;3.90625000), 

  Typesetting:-mtd(&uminus0;1.953125000), 

  Typesetting:-mtd(&uminus0;.9765625000), 

  Typesetting:-mtd(&uminus0;.48828125000), 

  Typesetting:-mtd(&uminus0;.244140625000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0)), Typesetting:-mtr(

  Typesetting:-mtd(192.307692307692307692307692308), 

  Typesetting:-mtd(48.0769230769230769230769230770), 

  Typesetting:-mtd(16.0256410256410256410256410257), 

  Typesetting:-mtd(6.00961538461538461538461538462), 

  Typesetting:-mtd(2.40384615384615384615384615385), 

  Typesetting:-mtd(1.00160256410256410256410256410), 

  Typesetting:-mtd(0.429258241758241758241758241759), 

  Typesetting:-mtd(192.307692307692307692307692308), 

  Typesetting:-mtd(96.1538461538461538461538461540), 

  Typesetting:-mtd(48.0769230769230769230769230771), 

  Typesetting:-mtd(24.0384615384615384615384615384), 

  Typesetting:-mtd(12.0192307692307692307692307692), 

  Typesetting:-mtd(6.00961538461538461538461538464), 

  Typesetting:-mtd(3.00480769230769230769230769231), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0.5)), Typesetting:-mtr(

  Typesetting:-mtd(96.1538461538461538461538461540), 

  Typesetting:-mtd(32.0512820512820512820512820513), 

  Typesetting:-mtd(12.0192307692307692307692307692), 

  Typesetting:-mtd(4.80769230769230769230769230770), 

  Typesetting:-mtd(2.00320512820512820512820512821), 

  Typesetting:-mtd(0.858516483516483516483516483518), 

  Typesetting:-mtd(0.375600961538461538461538461539), 

  Typesetting:-mtd(96.1538461538461538461538461540), 

  Typesetting:-mtd(64.1025641025641025641025641025), 

  Typesetting:-mtd(36.0576923076923076923076923078), 

  Typesetting:-mtd(19.2307692307692307692307692308), 

  Typesetting:-mtd(10.0160256410256410256410256410), 

  Typesetting:-mtd(5.15109890109890109890109890110), 

  Typesetting:-mtd(2.62920673076923076923076923077), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0.25)), Typesetting:-mtr(

  Typesetting:-mtd(48.0769230769230769230769230771), 

  Typesetting:-mtd(18.0288461538461538461538461539), 

  Typesetting:-mtd(7.21153846153846153846153846156), 

  Typesetting:-mtd(3.00480769230769230769230769232), 

  Typesetting:-mtd(1.28777472527472527472527472528), 

  Typesetting:-mtd(0.563401442307692307692307692310), 

  Typesetting:-mtd(0.250400641025641025641025641026), 

  Typesetting:-mtd(48.0769230769230769230769230771), 

  Typesetting:-mtd(36.0576923076923076923076923078), 

  Typesetting:-mtd(21.6346153846153846153846153847), 

  Typesetting:-mtd(12.0192307692307692307692307693), 

  Typesetting:-mtd(6.43887362637362637362637362640), 

  Typesetting:-mtd(3.38040865384615384615384615386), 

  Typesetting:-mtd(1.75280448717948717948717948719), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0.125)), Typesetting:-mtr(

  Typesetting:-mtd(24.0384615384615384615384615384), 

  Typesetting:-mtd(9.61538461538461538461538461538), 

  Typesetting:-mtd(4.00641025641025641025641025641), 

  Typesetting:-mtd(1.71703296703296703296703296703), 

  Typesetting:-mtd(0.751201923076923076923076923076), 

  Typesetting:-mtd(0.333867521367521367521367521367), 

  Typesetting:-mtd(0.150240384615384615384615384615), 

  Typesetting:-mtd(24.0384615384615384615384615384), 

  Typesetting:-mtd(19.2307692307692307692307692308), 

  Typesetting:-mtd(12.0192307692307692307692307692), 

  Typesetting:-mtd(6.86813186813186813186813186812), 

  Typesetting:-mtd(3.75600961538461538461538461538), 

  Typesetting:-mtd(2.00320512820512820512820512820), 

  Typesetting:-mtd(1.05168269230769230769230769230), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0.0625)), Typesetting:-mtr(

  Typesetting:-mtd(12.0192307692307692307692307692), 

  Typesetting:-mtd(5.00801282051282051282051282052), 

  Typesetting:-mtd(2.14629120879120879120879120879), 

  Typesetting:-mtd(0.939002403846153846153846153848), 

  Typesetting:-mtd(0.417334401709401709401709401710), 

  Typesetting:-mtd(0.187800480769230769230769230770), 

  Typesetting:-mtd(0.0853638548951048951048951048952), 

  Typesetting:-mtd(12.0192307692307692307692307692), 

  Typesetting:-mtd(10.0160256410256410256410256410), 

  Typesetting:-mtd(6.43887362637362637362637362638), 

  Typesetting:-mtd(3.75600961538461538461538461539), 

  Typesetting:-mtd(2.08667200854700854700854700855), 

  Typesetting:-mtd(1.12680288461538461538461538462), 

  Typesetting:-mtd(0.597546984265734265734265734268), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0.03125)), Typesetting:-mtr(

  Typesetting:-mtd(6.00961538461538461538461538464), 

  Typesetting:-mtd(2.57554945054945054945054945056), 

  Typesetting:-mtd(1.12680288461538461538461538462), 

  Typesetting:-mtd(0.500801282051282051282051282053), 

  Typesetting:-mtd(0.225360576923076923076923076924), 

  Typesetting:-mtd(0.102436625874125874125874125874), 

  Typesetting:-mtd(0.0469501201923076923076923076925), 

  Typesetting:-mtd(6.00961538461538461538461538464), 

  Typesetting:-mtd(5.15109890109890109890109890112), 

  Typesetting:-mtd(3.38040865384615384615384615386), 

  Typesetting:-mtd(2.00320512820512820512820512821), 

  Typesetting:-mtd(1.12680288461538461538461538462), 

  Typesetting:-mtd(0.614619755244755244755244755247), 

  Typesetting:-mtd(0.328650841346153846153846153847), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0.015625)), Typesetting:-mtr(

  Typesetting:-mtd(3.00480769230769230769230769231), 

  Typesetting:-mtd(1.31460336538461538461538461539), 

  Typesetting:-mtd(0.584268162393162393162393162394), 

  Typesetting:-mtd(0.262920673076923076923076923077), 

  Typesetting:-mtd(0.119509396853146853146853146853), 

  Typesetting:-mtd(0.0547751402243589743589743589744), 

  Typesetting:-mtd(0.0252808339497041420118343195266), 

  Typesetting:-mtd(3.00480769230769230769230769231), 

  Typesetting:-mtd(2.62920673076923076923076923077), 

  Typesetting:-mtd(1.75280448717948717948717948718), 

  Typesetting:-mtd(1.05168269230769230769230769230), 

  Typesetting:-mtd(0.597546984265734265734265734268), 

  Typesetting:-mtd(0.328650841346153846153846153847), 

  Typesetting:-mtd(0.176965837647928994082840236687), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0.0078125)), Typesetting:-mtr(

  Typesetting:-mtd(&minus;1000), Typesetting:-mtd(&uminus0;500.0), 

  Typesetting:-mtd(&uminus0;250.00), Typesetting:-mtd(&uminus0;125.000), 

  Typesetting:-mtd(&uminus0;62.5000), Typesetting:-mtd(&uminus0;31.25000), 

  Typesetting:-mtd(&uminus0;15.625000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(1192.30769230769230769230769231), 

  Typesetting:-mtd(644.230769230769230769230769231), 

  Typesetting:-mtd(362.179487179487179487179487180), 

  Typesetting:-mtd(215.144230769230769230769230769), 

  Typesetting:-mtd(137.019230769230769230769230769), 

  Typesetting:-mtd(94.3509615384615384615384615386), 

  Typesetting:-mtd(70.1407967032967032967032967034), 

  Typesetting:-mtd(&uminus0;192.307692307692307692307692308), 

  Typesetting:-mtd(&uminus0;96.1538461538461538461538461540), 

  Typesetting:-mtd(&uminus0;48.0769230769230769230769230776), 

  Typesetting:-mtd(&uminus0;24.0384615384615384615384615370), 

  Typesetting:-mtd(&uminus0;12.0192307692307692307692307702), 

  Typesetting:-mtd(&uminus0;6.00961538461538461538461538528), 

  Typesetting:-mtd(&uminus0;3.00480769230769230769230769137), 

  Typesetting:-mtd(0)), Typesetting:-mtr(Typesetting:-mtd(&uminus0;500.0), 

  Typesetting:-mtd(&uminus0;250.00), Typesetting:-mtd(&uminus0;125.000), 

  Typesetting:-mtd(&uminus0;62.5000), Typesetting:-mtd(&uminus0;31.25000), 

  Typesetting:-mtd(&uminus0;15.625000), Typesetting:-mtd(&uminus0;7.8125000), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(644.230769230769230769230769231), 

  Typesetting:-mtd(362.679487179487179487179487180), 

  Typesetting:-mtd(215.894230769230769230769230769), 

  Typesetting:-mtd(137.894230769230769230769230769), 

  Typesetting:-mtd(95.2884615384615384615384615386), 

  Typesetting:-mtd(71.1095467032967032967032967034), 

  Typesetting:-mtd(56.6859975961538461538461538462), 

  Typesetting:-mtd(&uminus0;144.230769230769230769230769231), 

  Typesetting:-mtd(&uminus0;80.1282051282051282051282051283), 

  Typesetting:-mtd(&uminus0;46.0737179487179487179487179488), 

  Typesetting:-mtd(&uminus0;27.6442307692307692307692307693), 

  Typesetting:-mtd(&uminus0;17.4278846153846153846153846154), 

  Typesetting:-mtd(&uminus0;11.5899725274725274725274725275), 

  Typesetting:-mtd(&uminus0;8.12907795329670329670329670331), 

  Typesetting:-mtd(0)), Typesetting:-mtr(Typesetting:-mtd(&uminus0;250.00), 

  Typesetting:-mtd(&uminus0;125.000), Typesetting:-mtd(&uminus0;62.5000), 

  Typesetting:-mtd(&uminus0;31.25000), Typesetting:-mtd(&uminus0;15.625000), 

  Typesetting:-mtd(&uminus0;7.8125000), Typesetting:-mtd(&uminus0;3.90625000), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(362.179487179487179487179487180), 

  Typesetting:-mtd(215.894230769230769230769230769), 

  Typesetting:-mtd(138.185897435897435897435897436), 

  Typesetting:-mtd(95.7572115384615384615384615386), 

  Typesetting:-mtd(71.6907967032967032967032967034), 

  Typesetting:-mtd(57.3422475961538461538461538462), 

  Typesetting:-mtd(48.2587187118437118437118437119), 

  Typesetting:-mtd(&uminus0;112.179487179487179487179487180), 

  Typesetting:-mtd(&uminus0;68.1089743589743589743589743591), 

  Typesetting:-mtd(&uminus0;43.2692307692307692307692307693), 

  Typesetting:-mtd(&uminus0;28.8461538461538461538461538462), 

  Typesetting:-mtd(&uminus0;20.1751373626373626373626373627), 

  Typesetting:-mtd(&uminus0;14.7557520604395604395604395605), 

  Typesetting:-mtd(&uminus0;11.2262954059829059829059829060), 

  Typesetting:-mtd(0)), Typesetting:-mtr(Typesetting:-mtd(&uminus0;125.000), 

  Typesetting:-mtd(&uminus0;62.5000), Typesetting:-mtd(&uminus0;31.25000), 

  Typesetting:-mtd(&uminus0;15.625000), Typesetting:-mtd(&uminus0;7.8125000), 

  Typesetting:-mtd(&uminus0;3.90625000), 

  Typesetting:-mtd(&uminus0;1.953125000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(215.144230769230769230769230769), 

  Typesetting:-mtd(137.894230769230769230769230769), 

  Typesetting:-mtd(95.7572115384615384615384615386), 

  Typesetting:-mtd(71.8845467032967032967032967034), 

  Typesetting:-mtd(57.6703725961538461538461538462), 

  Typesetting:-mtd(48.6839419261294261294261294262), 

  Typesetting:-mtd(42.6183143028846153846153846154), 

  Typesetting:-mtd(&uminus0;90.1442307692307692307692307694), 

  Typesetting:-mtd(&uminus0;58.8942307692307692307692307693), 

  Typesetting:-mtd(&uminus0;40.2644230769230769230769230770), 

  Typesetting:-mtd(&uminus0;28.7603021978021978021978021978), 

  Typesetting:-mtd(&uminus0;21.3824261675824175824175824176), 

  Typesetting:-mtd(&uminus0;16.4638421474358974358974358975), 

  Typesetting:-mtd(&uminus0;13.0583934294871794871794871795), 

  Typesetting:-mtd(0)), Typesetting:-mtr(Typesetting:-mtd(&uminus0;62.5000), 

  Typesetting:-mtd(&uminus0;31.25000), Typesetting:-mtd(&uminus0;15.625000), 

  Typesetting:-mtd(&uminus0;7.8125000), Typesetting:-mtd(&uminus0;3.90625000), 

  Typesetting:-mtd(&uminus0;1.953125000), 

  Typesetting:-mtd(&uminus0;.9765625000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(137.019230769230769230769230769), 

  Typesetting:-mtd(95.2884615384615384615384615386), 

  Typesetting:-mtd(71.6907967032967032967032967034), 

  Typesetting:-mtd(57.6703725961538461538461538462), 

  Typesetting:-mtd(48.8256829975579975579975579976), 

  Typesetting:-mtd(42.8673377403846153846153846154), 

  Typesetting:-mtd(38.5859830273892773892773892774), 

  Typesetting:-mtd(&uminus0;74.5192307692307692307692307693), 

  Typesetting:-mtd(&uminus0;51.6826923076923076923076923078), 

  Typesetting:-mtd(&uminus0;37.3454670329670329670329670330), 

  Typesetting:-mtd(&uminus0;28.0091002747252747252747252748), 

  Typesetting:-mtd(&uminus0;21.7013888888888888888888888889), 

  Typesetting:-mtd(&uminus0;17.2859909188034188034188034188), 

  Typesetting:-mtd(&uminus0;14.0918651660839160839160839161), 

  Typesetting:-mtd(0)), Typesetting:-mtr(Typesetting:-mtd(&uminus0;31.25000), 

  Typesetting:-mtd(&uminus0;15.625000), Typesetting:-mtd(&uminus0;7.8125000), 

  Typesetting:-mtd(&uminus0;3.90625000), 

  Typesetting:-mtd(&uminus0;1.953125000), 

  Typesetting:-mtd(&uminus0;.9765625000), 

  Typesetting:-mtd(&uminus0;.48828125000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(94.3509615384615384615384615386), 

  Typesetting:-mtd(71.1095467032967032967032967034), 

  Typesetting:-mtd(57.3422475961538461538461538462), 

  Typesetting:-mtd(48.6839419261294261294261294262), 

  Typesetting:-mtd(42.8673377403846153846153846154), 

  Typesetting:-mtd(38.6968771246114996114996114997), 

  Typesetting:-mtd(35.5288085937500000000000000001), 

  Typesetting:-mtd(&uminus0;63.1009615384615384615384615386), 

  Typesetting:-mtd(&uminus0;45.9306318681318681318681318682), 

  Typesetting:-mtd(&uminus0;34.6357743818681318681318681319), 

  Typesetting:-mtd(&uminus0;26.9389356303418803418803418804), 

  Typesetting:-mtd(&uminus0;21.5135884081196581196581196582), 

  Typesetting:-mtd(&uminus0;17.5678813374125874125874125874), 

  Typesetting:-mtd(&uminus0;14.6164260544143356643356643357), 

  Typesetting:-mtd(0)), Typesetting:-mtr(Typesetting:-mtd(&uminus0;15.625000), 

  Typesetting:-mtd(&uminus0;7.8125000), Typesetting:-mtd(&uminus0;3.90625000), 

  Typesetting:-mtd(&uminus0;1.953125000), 

  Typesetting:-mtd(&uminus0;.9765625000), 

  Typesetting:-mtd(&uminus0;.48828125000), 

  Typesetting:-mtd(&uminus0;.244140625000), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(70.1407967032967032967032967034), 

  Typesetting:-mtd(56.6859975961538461538461538462), 

  Typesetting:-mtd(48.2587187118437118437118437119), 

  Typesetting:-mtd(42.6183143028846153846153846154), 

  Typesetting:-mtd(38.5859830273892773892773892774), 

  Typesetting:-mtd(35.5288085937500000000000000001), 

  Typesetting:-mtd(33.0974571552245831091984938139), 

  Typesetting:-mtd(&uminus0;54.5157967032967032967032967034), 

  Typesetting:-mtd(&uminus0;41.2624484890109890109890109891), 

  Typesetting:-mtd(&uminus0;32.1764823717948717948717948718), 

  Typesetting:-mtd(&uminus0;25.7411858974358974358974358975), 

  Typesetting:-mtd(&uminus0;21.0438975087412587412587412588), 

  Typesetting:-mtd(&uminus0;17.5209312172202797202797202797), 

  Typesetting:-mtd(&uminus0;14.8145686945266272189349112426), 

  Typesetting:-mtd(0)), Typesetting:-mtr(Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), 

  Typesetting:-mtd(&uminus0;192.307692307692307692307692308), 

  Typesetting:-mtd(&uminus0;144.230769230769230769230769231), 

  Typesetting:-mtd(&uminus0;112.179487179487179487179487180), 

  Typesetting:-mtd(&uminus0;90.1442307692307692307692307694), 

  Typesetting:-mtd(&uminus0;74.5192307692307692307692307693), 

  Typesetting:-mtd(&uminus0;63.1009615384615384615384615386), 

  Typesetting:-mtd(&uminus0;54.5157967032967032967032967034), 

  Typesetting:-mtd(192.307692307692307692307692308), 

  Typesetting:-mtd(96.1538461538461538461538461540), 

  Typesetting:-mtd(48.0769230769230769230769230776), 

  Typesetting:-mtd(24.0384615384615384615384615370), 

  Typesetting:-mtd(12.0192307692307692307692307702), 

  Typesetting:-mtd(6.00961538461538461538461538528), 

  Typesetting:-mtd(3.00480769230769230769230769137), 

  Typesetting:-mtd(&uminus0;.5)), Typesetting:-mtr(Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), 

  Typesetting:-mtd(&uminus0;96.1538461538461538461538461540), 

  Typesetting:-mtd(&uminus0;80.1282051282051282051282051283), 

  Typesetting:-mtd(&uminus0;68.1089743589743589743589743591), 

  Typesetting:-mtd(&uminus0;58.8942307692307692307692307693), 

  Typesetting:-mtd(&uminus0;51.6826923076923076923076923078), 

  Typesetting:-mtd(&uminus0;45.9306318681318681318681318682), 

  Typesetting:-mtd(&uminus0;41.2624484890109890109890109891), 

  Typesetting:-mtd(96.1538461538461538461538461540), 

  Typesetting:-mtd(64.1025641025641025641025641027), 

  Typesetting:-mtd(44.0705128205128205128205128206), 

  Typesetting:-mtd(31.2500000000000000000000000000), 

  Typesetting:-mtd(22.8365384615384615384615384616), 

  Typesetting:-mtd(17.1703296703296703296703296704), 

  Typesetting:-mtd(13.2533482142857142857142857143), 

  Typesetting:-mtd(&uminus0;.25)), Typesetting:-mtr(Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), 

  Typesetting:-mtd(&uminus0;48.0769230769230769230769230776), 

  Typesetting:-mtd(&uminus0;46.0737179487179487179487179488), 

  Typesetting:-mtd(&uminus0;43.2692307692307692307692307693), 

  Typesetting:-mtd(&uminus0;40.2644230769230769230769230770), 

  Typesetting:-mtd(&uminus0;37.3454670329670329670329670330), 

  Typesetting:-mtd(&uminus0;34.6357743818681318681318681319), 

  Typesetting:-mtd(&uminus0;32.1764823717948717948717948718), 

  Typesetting:-mtd(48.0769230769230769230769230776), 

  Typesetting:-mtd(44.0705128205128205128205128206), 

  Typesetting:-mtd(37.6602564102564102564102564103), 

  Typesetting:-mtd(31.2500000000000000000000000000), 

  Typesetting:-mtd(25.6696428571428571428571428572), 

  Typesetting:-mtd(21.0873111263736263736263736264), 

  Typesetting:-mtd(17.4207303113553113553113553114), 

  Typesetting:-mtd(&uminus0;.125)), Typesetting:-mtr(Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), 

  Typesetting:-mtd(&uminus0;24.0384615384615384615384615370), 

  Typesetting:-mtd(&uminus0;27.6442307692307692307692307693), 

  Typesetting:-mtd(&uminus0;28.8461538461538461538461538462), 

  Typesetting:-mtd(&uminus0;28.7603021978021978021978021978), 

  Typesetting:-mtd(&uminus0;28.0091002747252747252747252748), 

  Typesetting:-mtd(&uminus0;26.9389356303418803418803418804), 

  Typesetting:-mtd(&uminus0;25.7411858974358974358974358975), 

  Typesetting:-mtd(24.0384615384615384615384615370), 

  Typesetting:-mtd(31.2500000000000000000000000000), 

  Typesetting:-mtd(31.2500000000000000000000000000), 

  Typesetting:-mtd(28.5027472527472527472527472528), 

  Typesetting:-mtd(25.0042925824175824175824175825), 

  Typesetting:-mtd(21.5881124084249084249084249085), 

  Typesetting:-mtd(18.5546875000000000000000000000), 

  Typesetting:-mtd(&uminus0;0.0625)), Typesetting:-mtr(Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), 

  Typesetting:-mtd(&uminus0;12.0192307692307692307692307702), 

  Typesetting:-mtd(&uminus0;17.4278846153846153846153846154), 

  Typesetting:-mtd(&uminus0;20.1751373626373626373626373627), 

  Typesetting:-mtd(&uminus0;21.3824261675824175824175824176), 

  Typesetting:-mtd(&uminus0;21.7013888888888888888888888889), 

  Typesetting:-mtd(&uminus0;21.5135884081196581196581196582), 

  Typesetting:-mtd(&uminus0;21.0438975087412587412587412588), 

  Typesetting:-mtd(12.0192307692307692307692307702), 

  Typesetting:-mtd(22.8365384615384615384615384616), 

  Typesetting:-mtd(25.6696428571428571428571428572), 

  Typesetting:-mtd(25.0042925824175824175824175825), 

  Typesetting:-mtd(22.9772397741147741147741147742), 

  Typesetting:-mtd(20.5745860042735042735042735043), 

  Typesetting:-mtd(18.2257521124708624708624708625), 

  Typesetting:-mtd(&uminus0;0.03125)), Typesetting:-mtr(Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), 

  Typesetting:-mtd(&uminus0;6.00961538461538461538461538528), 

  Typesetting:-mtd(&uminus0;11.5899725274725274725274725275), 

  Typesetting:-mtd(&uminus0;14.7557520604395604395604395605), 

  Typesetting:-mtd(&uminus0;16.4638421474358974358974358975), 

  Typesetting:-mtd(&uminus0;17.2859909188034188034188034188), 

  Typesetting:-mtd(&uminus0;17.5678813374125874125874125874), 

  Typesetting:-mtd(&uminus0;17.5209312172202797202797202797), 

  Typesetting:-mtd(6.00961538461538461538461538528), 

  Typesetting:-mtd(17.1703296703296703296703296704), 

  Typesetting:-mtd(21.0873111263736263736263736264), 

  Typesetting:-mtd(21.5881124084249084249084249085), 

  Typesetting:-mtd(20.5745860042735042735042735043), 

  Typesetting:-mtd(18.9773334304584304584304584305), 

  Typesetting:-mtd(17.2392304960664335664335664336), 

  Typesetting:-mtd(&uminus0;0.015625)), Typesetting:-mtr(Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), 

  Typesetting:-mtd(&uminus0;3.00480769230769230769230769137), 

  Typesetting:-mtd(&uminus0;8.12907795329670329670329670331), 

  Typesetting:-mtd(&uminus0;11.2262954059829059829059829060), 

  Typesetting:-mtd(&uminus0;13.0583934294871794871794871795), 

  Typesetting:-mtd(&uminus0;14.0918651660839160839160839161), 

  Typesetting:-mtd(&uminus0;14.6164260544143356643356643357), 

  Typesetting:-mtd(&uminus0;14.8145686945266272189349112426), 

  Typesetting:-mtd(3.00480769230769230769230769137), 

  Typesetting:-mtd(13.2533482142857142857142857143), 

  Typesetting:-mtd(17.4207303113553113553113553114), 

  Typesetting:-mtd(18.5546875000000000000000000000), 

  Typesetting:-mtd(18.2257521124708624708624708625), 

  Typesetting:-mtd(17.2392304960664335664335664336), 

  Typesetting:-mtd(16.0034245352003765465303926843), 

  Typesetting:-mtd(&uminus0;0.0078125)), Typesetting:-mtr(Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0.5), Typesetting:-mtd(0.25), Typesetting:-mtd(0.125), 

  Typesetting:-mtd(0.0625), Typesetting:-mtd(0.03125), 

  Typesetting:-mtd(0.015625), Typesetting:-mtd(0.0078125), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(0), Typesetting:-mtd(0), 

  Typesetting:-mtd(0), Typesetting:-mtd(&uminus0;.5), 

  Typesetting:-mtd(&uminus0;.25), Typesetting:-mtd(&uminus0;.125), 

  Typesetting:-mtd(&uminus0;0.0625), Typesetting:-mtd(&uminus0;0.03125), 

  Typesetting:-mtd(&uminus0;0.015625), Typesetting:-mtd(&uminus0;0.0078125), 

  Typesetting:-mtd(0)))]
> lambda:=array(1..2*(n+m)+L); # lambda^2 = l^2*omega^2*rho*A/EI
> lambda:=evalf(Eigenvals(KK,MM,vecs));
                  lambda := array(1 .. 29, [])
                               /                /
   lambda:=[Typesetting:-mtable\Typesetting:-mtr\

     Typesetting:-mtd(uminus0FloatApplyFunction(infinity)), 

     Typesetting:-mtd(FloatApplyFunction(infinity)), 

                     /                                  8\  
     Typesetting:-mtd\2.39835088501298394166886794599 10 /, 

                     /                                  6\  
     Typesetting:-mtd\5.33393408275770312089746735537 10 /, 

                     /                                  6\  
     Typesetting:-mtd\6.79150414974729298348789302728 10 /, 

                     /                                  6\  
     Typesetting:-mtd\2.66350113744154582319443959659 10 /, 

                     /                                  6\  
     Typesetting:-mtd\4.07845621491973838353625593358 10 /, 

                     /                                  6\  
     Typesetting:-mtd\1.80285358451257395097712343727 10 /, 

                     /                                  6\  
     Typesetting:-mtd\1.16441902110791643319283673298 10 /, 

                     /                                  6\  
     Typesetting:-mtd\1.37595887777881723562386760792 10 /, 

                     /                                  5\  
     Typesetting:-mtd\8.18525898487320135922743132081 10 /, 

                     /                                  5\  
     Typesetting:-mtd\2.37465477272967096075573977980 10 /, 

                     /                                  5\  
     Typesetting:-mtd\6.25738092010713488895040758136 10 /, 

                     /                                  5\  
     Typesetting:-mtd\5.95985276084412253093849628816 10 /, 

                     /                                  5\  
     Typesetting:-mtd\4.77060270377514219567163829631 10 /, 

                     /                                  5\  
     Typesetting:-mtd\4.61538461538461538461538462122 10 /, 

                     /                                  5\  
     Typesetting:-mtd\9.76837267001592245725097091616 10 /, 

     Typesetting:-mtd(99074.5671508923354807304857855), 

                     /                                  5\  
     Typesetting:-mtd\8.02116400061678743407769715532 10 /, 

     Typesetting:-mtd(34377.2916528868947108159743624), 

     Typesetting:-mtd(6098.13282211815362404327575677), 

     Typesetting:-mtd(94.0516384265899719024627061709), 

                     /                                  5\  
     Typesetting:-mtd\6.95217354251685161877626201533 10 /, 

                     /                                  5\  
     Typesetting:-mtd\1.45478593368430425691533319715 10 /, 

                     /                                  5\  
     Typesetting:-mtd\4.67807401215496073868744852462 10 /, 

                     /                                  5\  
     Typesetting:-mtd\5.22720473844859666971688739322 10 /, 

     Typesetting:-mtd(61725.5945987527240963741286006), 

     Typesetting:-mtd(16555.3940228646774524527680030), 

                                                      \\ 
     Typesetting:-mtd(1376.12534263782893047474377459)//]
Salida de archivo a Matlab
> res11:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/masa.csv",WRITE,TEXT);
> res22:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/rigi.csv",WRITE,TEXT);
Error, (in fopen) file or directory does not exist

Error, (in fopen) file or directory does not exist

> writedata(res22,KK,float):writedata(res11,MM,float);
> fclose(res11):fclose(res22):
> #print(MM);
> #s:=det(xx*MM-KK);
> #plot(0.0000000001*s,xx=15..70);
> #ss:=evalf(solve(s=0));
> Omega:=array(1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do;
> #Omega[i]:=evalf(lambda[i]^0.5/Pi^2):
> omega[i]:=evalf(lambda[i]^0.25);
> writestat(res,"frec=","=",omega[i]):
> #Omega[i]:=evalf(lambda[i]^0.25);
> end do;
        omega[1] := Float(infinity) + Float(undefined) I
                               49
                  omega[2] := Float(infinity)
                               30
          omega[3] := 124.445208724435086586751812481
                               46
          omega[4] := 48.0575814951370121643808193692
                               46
          omega[5] := 51.0494999781963272063103426994
                               46
          omega[6] := 40.3983122496903563742827028553
                               46
          omega[7] := 44.9390565963036787129350653248
                               46
          omega[8] := 36.6429233755485508303904291278
                               46
          omega[9] := 32.8493910203719067051903402733
                               46
          omega[10] := 34.2492735040753488644001270485
                               46
          omega[11] := 30.0786338001933791742171712772
                               46
          omega[12] := 22.0749699067207544872266410513
                               46
          omega[13] := 28.1253637786097949504990291871
                               46
          omega[14] := 27.7849028517124603844731928184
                               46
          omega[15] := 26.2810863089821082229629979007
                               46
          omega[16] := 26.0646546205154510266478093815
                               46
          omega[17] := 31.4380467165702949358895910964
                               46
          omega[18] := 17.7415085922253334777758225274
                               46
          omega[19] := 29.9267357585058748599864452831
                               46
          omega[20] := 13.6165760087710052962049552015
                               46
          omega[21] := 8.83688533719297333890122551195
                               46
          omega[22] := 3.11416479938288131691349041696
                               46
          omega[23] := 28.8755424235335998728919309757
                               46
          omega[24] := 19.5298889263696136774405411022
                               46
          omega[25] := 26.1527144604556791827603725097
                               46
          omega[26] := 26.8885496745939537984735650075
                               46
          omega[27] := 15.7621813722920508057582594430
                               46
          omega[28] := 11.3431814787552379286021179716
                               46
          omega[29] := 6.09066198775134456858599882291
                               46
> fclose(res);
> convert(omega,'list'):sort(%);
[Float(infinity), 51.0494999781963272063103426994, 

  17.7415085922253334777758225274, 19.5298889263696136774405411022, 

  13.6165760087710052962049552015, Float(infinity) + Float(undefined) I, 

  27.7849028517124603844731928184, 6.09066198775134456858599882291, 

  15.7621813722920508057582594430, 8.83688533719297333890122551195, 

  22.0749699067207544872266410513, 48.0575814951370121643808193692, 

  26.0646546205154510266478093815, 26.1527144604556791827603725097, 

  31.4380467165702949358895910964, 40.3983122496903563742827028553, 

  36.6429233755485508303904291278, 28.8755424235335998728919309757, 

  28.1253637786097949504990291871, 11.3431814787552379286021179716, 

  34.2492735040753488644001270485, 26.2810863089821082229629979007, 

  3.11416479938288131691349041696, 124.445208724435086586751812481, 

  29.9267357585058748599864452831, 26.8885496745939537984735650075, 

  30.0786338001933791742171712772, 32.8493910203719067051903402733, 

  44.9390565963036787129350653248]
Formas Modales
Autovalores
> for i from 1 by 1 to 2*(n+m)+L do:
> v[i]:=array(1..2*(n+m)+L,1..1):
> v[i]:= linalg[submatrix](vecs, 1..2*(n+m)+L, i..i):
> end do:
> #print(v[29]):
> #print(vecs);
> print(v[42]); 
                             v[42]
> norm(v[4]);
                1.00000000000000000000000000000
Forma modal
> for dib from 1 by 1 to 2*(n+m)+L do:
> W1[dib]:=sum(vecs[ii+m,dib]*w1[ii],ii=1..n):
> Phi1[dib]:=sum(vecs[ii,dib]*phi1[ii],ii=1..m):
> W2[dib]:=sum(vecs[ii+m+n+m,dib]*w2[ii],ii=1..n);
> Phi2[dib]:=sum(vecs[ii+m+n,dib]*phi2[ii],ii=1..m);
> end do:
> with(plots):
> dib:=33:
Warning, the name changecoords has been redefined

> P1:=plot({100000000000000000*W1[dib]},x=0..c[1]):
> P2:=plot({100000000000000000*W2[dib]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> display({P1});
> display({P1,P2});
Plotting error, empty plot
Plotting error, empty plot
Normalización
> #for i from 1 by 1 to 2*(n+m)+L do:
> #nL2W1[i]:=int((W1[i])^2,x=0..c[1]):
> #nL2W2[i]:=int((W2[i])^2,x=c[1]..1):
> #nL2Phi1[i]:=int((Phi1[i])^2,x=0..c[1]):
> #nL2Phi2[i]:=int((Phi2[i])^2,x=c[1]..1):
> #W1[i]:=W1[i]/(nL2W1[i])^0.5;
> #W2[i]:=W2[i]/(nL2W2[i])^0.5;
> #Phi1[i]:=Phi1[i]/(nL2Phi1[i])^0.5;
> #Phi2[i]:=Phi2[i]/(nL2Phi2[i])^0.5;
>  #end do:
> WW139:=plot({W1[39]},x=0..c[1]):
> WW239:=plot({W2[39]},x=c[1]..1):
> WW140:=plot({W1[40]},x=0..c[1]):
> WW240:=plot({W2[40]},x=c[1]..1):
> WW141:=plot({W1[41]},x=0..c[1]):
> WW241:=plot({W2[41]},x=c[1]..1):
> WW142:=plot({W1[42]},x=0..c[1]):
> WW242:=plot({W2[42]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> W11x:=plot({diff(W1[dib],x)},x=0..c[1]):
> W11xxx:=plot({diff(W1[dib],x$3)},x=0..c[1]):
> Phi11:=plot({Phi1[dib]},x=0..c[1]):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> 
> W22x:=plot({diff(W2[dib],x)},x=c[1]..1):
> W22xxx:=plot({diff(W2[dib],x$3)},x=c[1]..1):
> Phi22:=plot({Phi21[dib]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> 
> evalf(subs(x=0.5,W2[dib]));
> evalf(subs(x=0.5,W1[dib]));
> evalf(subs(x=0.5,Phi2[dib]));
> evalf(subs(x=0.5,Phi1[dib]));
                             W2[33]
                             W1[33]
                            Phi2[33]
                            Phi1[33]
> evalf(subs(x=0.5,Phi1[dib]));
                            Phi1[33]
> #plot({W1[dib],diff(W1[dib],x)},x=0..c[1]);
> #plot({W2[dib]},x=c[1]..1);
> #plot({Phi1[dib]},x=0..c[1]);
> #plot({Phi2[dib]},x=c[1]..1);
> display({WW142,WW242});
> display({WW141,WW241});
> display({WW139,WW239});
> #display({100000*W11xxx,100000*W22xxx});
> #display({W11,W22,W11x,W22x});
Plotting error, empty plot
Plotting error, empty plot
Plotting error, empty plot
Normalizar
> nL2:=int((W1[39])^2,x=0..0.5);
                                                      2
        nL2 := 0.500000000000000000000000000000 W1[39] 
       nn := 0.008343975305128818107528826388809051070708
> WN1[39]:=W1[39]/nL2^0.5;
                  1.41421356237309504880168872421 W1[39]
       WN1[39] := --------------------------------------
                                        0.5             
                               /      2\                
                               \W1[39] /                
> plot(WN1[39],x=0..0.5);
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Plotting error, empty plot
> plot(W1[39],x=0..0.5);
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Plotting error, empty plot
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
