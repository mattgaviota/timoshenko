VIGAS TIMOSHENKO - MULTIPLICADORES  DE LAGRANGE
Espesor Uniforme - Isotropía - Condiciones de bordes elásticas y rótula intermedia
06/10/06
Utilizamos la base 1,x,x^2... 
Analisis Dinámico: FUNCIONA
Corregido a media para aplicar Lagrange con rótula y restriccines elásticas intermedias
(Ver Paper "Free Vibration of Multi-span Timoshenko Beams using static Timoshenko Beams functions" Journal of sound and vibrations, D. Zhou)
Aproxima la Funcion Wtotal y Phi de flexión.


> restart; a:=10: Digits:=a: 
> with(linalg):

Warning, the protected names norm and trace have been redefined and unprotected

Archivo para escribir los resultados

> res:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/ISOTROPA/PSk 4.csv",WRITE,TEXT);
> writestat(res,'n','m','r','Frecuencia'):
Error, (in fopen) file or directory does not exist

Números de Polinomios en cada Dirección (se supone la misma cantidad en las dos direcciones)
> n:=7:  # Dirección Girof
> m:=n:  # Dirección W
> writestat(res,"n =",n,"m =",m,"Digitos=",a):

Datos
Longitud de la viga(ojo con los datos)
> nu:=0.30:
> alpha:=0.1: ks:=5/6:  Gamma:=ks/(2*(1.0+nu)): # Gamma:=1/5; #alpha=r/l: 
> #alpha:=0.002: ks:=0.866666667:  Gamma:=ks/(2*(1.0+nu)): # Gamma:=1/5; #alpha=r/l: 

> l:=1.0:                r:=alpha/(12)^0.5; r*12^0.5/l:

                          r := 0.02886751346

Constantes de los Resortes en los bordes de la viga
> T1:=0; :T2:=0;     R1:=0;  R2:=0;
> #T1:=1.; :T2:=10.;     R1:=100.0;  R2:=0;
> #T1:=10.0^8;T2:=10.0^3;R1:=100.0;R2:=0;

                               T1 := 0


                               T2 := 0


                               R1 := 0


                               R2 := 0

> writestat(res,"T1",T1,"T2",T2,"R1",R1,"R2",R2):
Ubicación del Resorte Intermedio
> c[1]:=0.3: 
> Tc:=0; Rc:=0;
> R12:=1:

                               Tc := 0


                               Rc := 0

Condiciones de Borde de la Viga (  w1:Desplazamiento por flexion 1 tramo, w2:Desplazamiento por flexión 2 tramo) 
> c1:=c[1]:
> writestat(res,"c",c1,"k",ks,"h/l",alpha):
Condiciones de controno:  1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF- 6 ->FS  
> 
> ccf1:=2:  #(W tramo 1)
> ccg1:=5:  #(Phi tramo 1)
> ccf2:=6: #(W tramo 2)
> ccg2:=5: #(Phi tramo 2)
Condicines impuestas por los multiplicadores de Lagrange(L=1 para el caso de vigas con articulacion)
> L:=1: #Cantidad de condiciones


Subrutina para determinar las condiciones de contorno(xb: determina el que borde estamos: 0,1)
ccc = 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF 
> calccc := proc( cc,p,x1,x2)
> if (cc=1) then:
> p[1]:=(x-x1)*(x-x2):
> elif (cc=2) then: 
> p[1]:=(x-x1):
> elif (cc=3) then: 
> p[1]:=(x-x1)^2:
> elif (cc=4) then: 
> p[1]:=(x-x1)^2*(x-x2):
> elif(cc=5) then:
> p[1]:=1:
> elif(cc=6) then:
> p[1]:=(x2-x):
> end if:
> return p:
> end proc:
Subrutina para calcular los polinomios simples
> calcps := proc( pp1,nn,p,p0,p1,px,px0,px1,pxx,x1,x2) global i:
>   p[1]:=pp1:
>   p0[1]:=subs(x=x1,p[1]);
>   p1[1]:=subs(x=x2,p[1]);
>   for i from 2 by 1 to nn do:
>      p[i]:=expand(p[i-1]*x):
>      p0[i]:=subs(x=x1,p[i]);
            
>   p1[i]:=subs(x=x2,p[i]):
>   end do:
>   for i from 1 by 1 to n do:
>      px[i]:=diff(p[i],x): pxx[i]:=diff(p[i],x$2): 
>      px0[i]:=subs(x=x1,px[i]);px1[i]:=subs(x=x2,px[i]):
>   end do:
>   return p,p0,p1,px,px0,px1,pxx
> end proc:
ccf1: indica la condición de contorno de Wf en el primer tramo: 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF  
> 
1 Tramo: 
> 
> x1:=0: x2:=c1:
> calccc( ccf1,w1,x1,x2):
> calcps (w1[1],n,w1,w10,w11,w1x,w1x0,w1x1,w1xx,x1,x2):
> calccc( ccg1,phi1,x1,x2):
> calcps (phi1[1],m,phi1,phi10,phi11,phi1x,phi1x0,phi1x1,phi1xx,x1,x2):
> print(phi1);print(phi10);print(phi11);
> print(w1);print(w10);print(w11);

                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


       table([1 = 1, 2 = 0, 3 = 0, 5 = 0, 4 = 0, 7 = 0, 6 = 0])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])


                     2       3       5       4       7
  table([1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x ,

             6
        6 = x

        ])


       table([1 = 0, 2 = 0, 3 = 0, 5 = 0, 4 = 0, 7 = 0, 6 = 0])


  table([1 = 0.3, 2 = 0.09, 3 = 0.027, 5 = 0.00243, 4 = 0.0081,

        7 = 0.0002187,

        6 = 0.000729

        ])

ccf2: indica la condición de contorno de Wf en el segundo tramo: 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF  
> 
2 Tramo: 
> 
> x1:=c1: x2:=1:
> calccc( ccf2,w2,x1,x2):
> calcps (w2[1],n,w2,w20,w21,w2x,w2x0,w2x1,w2xx,x1,x2):
> calccc( ccg2,phi2,x1,x2):
> calcps (phi2[1],m,phi2,phi20,phi21,phi2x,phi2x0,phi2x1,phi2xx,x1,x2):
> print(phi1);print(phi2);print(phi21);
> print(w1); print(w2);
> #print(w1);print(w1x);print(w21);

                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


       table([1 = 1, 2 = 1, 3 = 1, 5 = 1, 4 = 1, 7 = 1, 6 = 1])


                     2       3       5       4       7
  table([1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x ,

             6
        6 = x

        ])


                             2       2    3       4    5       3    4
  table([1 = 1 - x, 2 = x - x , 3 = x  - x , 5 = x  - x , 4 = x  - x

               6    7
        , 7 = x  - x ,

             5    6
        6 = x  - x

        ])

Energía ( Forma Lineal) 
> print(phi1); print(phi2);

                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])

Matrices de masa de cada tramo 
> E:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do;
>    for j from 1 by 1 to n do;
>       E[i,j,1]:=int((r/l)^2*phi1[j]*phi1[i],x=0..c[1]):
>       E[i,j,2]:=int((r/l)^2*phi2[j]*phi2[i],x=c[1]..l):
>    end do;
> end do;
> F:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>       F[i,j,1]:=int(w1[j]*w1[i],x=0..c[1]):
>       F[i,j,2]:=int(w2[j]*w2[i],x=c[1]..1):
>    end do:
> end do:
> #print(F);
MM: Matriz que multiplica al autovalor: Matriz de Masa
> 
> M:=array(1..n+m,1..n+m,1..2):
> for i from 1 by 1 to n+m do:
>    for j from 1 by 1 to n+m do:
>       M[i,j,1]:=0:  M[i,j,2]:=0:  
>    end do:
> end do:
> for t from 1 by 1 to 2 do:
>    for i from 1 by 1 to n+m do:
>      if (i<=n) then:
>        for j from 1 by 1 to n+m do:                 
>           if (j<=n) then:
>              M[i,j,t]:=E[i,j,t]:
>           end if:
>        end do:  
>      else:
>        for j from 1 by 1 to n+m do:
>          if (j>n) then:
>              M[i,j,t]:=F[i-n,j-n,t]:
>          end if:
>        end do:
>      end if:
>    end do:
> end do:
> #print(E); print(M);
> 
MM
> 
> MM:=array(1..2*(n+m)+L,1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do:
>   for j from 1 by 1 to 2*(n+m)+L do:
>      MM[i,j]:=0:  
>   end do:
> end do:
> for i from 1 by 1 to 2*(n+m) do:
>   for j from 1 by 1 to 2*(n+m) do:
>      if (i<=(n+m)) then:                     
>         if (j<=(n+m)) then:
>            MM[i,j]:=M[i,j,1]:
>         end if:
>      else
>         if (j>(n+m)) then:
>            MM[i,j]:=M[i-(n+m),j-(n+m),2]:
>         end if:  
>      end if:
>   end do:
> end do:
> #print(MM);print(F);
Prueba:
> for i from 1 by 1 to n+m do;
>   for j from 1 by 1 to n+m do;
>      t:=i+j:
>      v1[t]:=is(MM[i,j]=M[i,j,1]);  
>      v2[t]:=is(MM[i+n+m,j+n+m]=M[i,j,2]);  
>   end do;
> end do;
> #print(v1);print(v2);
> print(w1);print(w1x);

                     2       3       5       4       7
  table([1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x ,

             6
        6 = x

        ])


                                2         4         3         6
  table([1 = 1, 2 = 2 x, 3 = 3 x , 5 = 5 x , 4 = 4 x , 7 = 7 x ,

               5
        6 = 6 x

        ])

Matrices de rigidez de cada tramo
Denxn
> De:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do:
>    for j from 1 by 1 to n do:
>     De[i,j,1]:=int(Gamma*(l/r)^2*w1x[i]*w1x[j],x=0..c[1])+T1*w10[j]*w10[i]+Tc*w11[j]*w11[i]:               
>     De[i,j,2]:=int(Gamma*(l/r)^2*w2x[i]*w2x[j],x=c[1]..1)+T2*w21[j]*w21[i]:
>    end do:
> end do:
Bmxm
> B:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>       B[i,j,1]:=int(Gamma*(l/r)^2*w1x[j]*phi1[i],x=0..c[1]):
>       B[i,j,2]:=int(Gamma*(l/r)^2*w2x[j]*phi2[i],x=c[1]..1):
>    end do:
> end do:
Cnxn
> C:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do:
>    for j from 1 by 1 to n do:
>       C[i,j,1]:=int(Gamma*(l/r)^2*w1x[i]*phi1[j],x=0..c[1]):
>       C[i,j,2]:=int(Gamma*(l/r)^2*w2x[i]*phi2[j],x=c[1]..1):
>    end do:
> end do:
Amxm
> A:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>        A[i,j,1]:=int(Gamma*(l/r)^2*phi1[j]*phi1[i]+phi1x[j]*phi1x[i],x=0..c[1]):
>        A[i,j,1]:=A[i,j,1]+R1*phi10[j]*phi10[i]+Rc*phi11[j]*phi11[i]+R12*phi11[i]*phi11[j]:          
>        A[i,j,2]:=int(Gamma*(l/r)^2*phi2[i]*phi2[j]+phi2x[i]*phi2x[j],x=c[1]..1):
>        A[i,j,2]:=A[i,j,2]+R2*phi21[i]*phi21[j]+R12*phi20[i]*phi20[j]:
>    end do:
> end do:
AAmxm
> AA:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>        AA[i,j,1]:=-R12*phi11[i]*phi20[j]:
>        AA[i,j,2]:=-R12*phi11[j]*phi20[i]:
>    end do:
> end do:
> print(phi11);print(phi20);

  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])

> #print(AA);
KK: Matriz de Rigidez total
> K1:=array(1..(n+m),1..(n+m),1..2):
> for t from 1 by 1 to 2 do:
>    for i from 1 by 1 to n+m do:
>       if (i<=n) then:
>          for j from 1 by 1 to n+m do:  
>             if (j<=n) then:
>                 K1[i,j,t]:=A[i,j,t]:
>             else:
>                 K1[i,j,t]:=B[i,j-n,t]:
>             end if:
>          end do:
>        else:
>          for j from 1 by 1 to n+m do:
>            if (j<=n) then:
>                K1[i,j,t]:=C[i-n,j,t]:
>            else:
>                K1[i,j,t]:=De[i-n,j-n,t]:
>            end if:
>          end do:
>       end if:
>    end do:
> end do:
> #print(K1);
Prueba:
> t:=0:
> for i from 1 by 1 to n do;
>   for j from 1 by 1 to n do;     
>      t:=t+1:
>      v11[t]:=is(K1[i,j,1]=A[i,j,1]);  
>      v22[t]:=is(K1[i,j+n,1]=B[i,j,1]);  
>      v33[t]:=is(K1[i+n,j,2]=C[i,j,2]);  
>      v44[t]:=is(K1[i+n,j+n,2]=De[i,j,2]);  
>   end do;
> end do;
> #print(v11);print(v22);print(v33);print(v44);
KK
> 
> KK:=array(1..2*(n+m)+L,1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do:
>   for j from 1 by 1 to 2*(n+m)+L do:
>      KK[i,j]:=0:  
>   end do:
> end do:
> for i from 1 by 1 to 2*(n+m) do:
>    if (i<=(n+m)) then:
>        for j from 1 by 1 to 2*(n+m) do:                 
>           if (j<=(n+m)) then:
>              KK[i,j]:=K1[i,j,1]:
>           end if:
>         end do:  
>    else:
>        for j from 1 by 1 to 2*(n+m) do:
>           if (j>(n+m)) then:
>              KK[i,j]:=K1[i-(n+m),j-(n+m),2]:
>           end if:
>        end do:
>    end if:
>    for j from 1 by 1 to 2*(n+m) do:                 
>        if (i<=n) then:
>           if (j>n+m and j<=2*n+m) then:
>              KK[i,j]:=AA[i,j-(n+m),1]:
>           end if:
>        end if: 
>        if (i > (n+m) and i <= 2*n+m ) then:
>           if (j<=n) then:
>              KK[i,j]:=AA[i-(n+m),j,2]:
>           end if:
>        end if:
>     end do:   
> end do:
> 
> print(w11);print(w20);

  table([1 = 0.3, 2 = 0.09, 3 = 0.027, 5 = 0.00243, 4 = 0.0081,

        7 = 0.0002187,

        6 = 0.000729

        ])


  table([1 = 0.7, 2 = 0.21, 3 = 0.063, 5 = 0.00567, 4 = 0.0189,

        7 = 0.0005103,

        6 = 0.001701

        ])

> #print(KK);
Condiciones impuesta por los multiplicadores 1 fila por cada condición extra
> for i from 1 by 1 to n do:
Esta condición vale para cuando existe rótula 
> 
>       KK[2*(n+m)+1,i+m]:=w11[i]:
>       KK[2*(n+m)+1,i+2*m+n]:=-w20[i]:
>       KK[i+m,2*(n+m)+1]:=w11[i]:
>       KK[i+2*m+n,2*(n+m)+1]:=-w20[i]:
 
>      Esta condicion vale para reproducir dos span.
> 
>       #KK[2*(n+m)+1,i]:=phi11[i]:
>       #KK[2*(n+m)+1,i+m+n]:=-phi20[i]:
>       #KK[i,2*(n+m)+1]:=phi11[i]:
>       #KK[i+m+n,2*(n+m)+1]:=-phi20[i]:
> end do:
> print(w11);print(w20);
> print(phi11);print(phi20);

  table([1 = 0.3, 2 = 0.09, 3 = 0.027, 5 = 0.00243, 4 = 0.0081,

        7 = 0.0002187,

        6 = 0.000729

        ])


  table([1 = 0.7, 2 = 0.21, 3 = 0.063, 5 = 0.00567, 4 = 0.0189,

        7 = 0.0005103,

        6 = 0.001701

        ])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])

> #for i from 1 by 1 to 2*(n+m)+L do:
>  #  for j from 1 by 1 to 2*(n+m)+L do:
>   #   if(is(KK[i,j]=KK[j,i])=true) then
>    #  else
>     #     print(KK[i,j],i,j);
>      #end if:
>    #end do:
> #end do:
> #print(AA);
Calculo de Autovalores y Autovectores
> #print(phi2);
> print(KK);

        [116.3846154 , 17.60769231 , 3.551538461 , 0.8058461538 ,

        0.1950230769 , 0.04916076923 , 0.01274548352 , 115.3846154 ,

        34.61538461 , 10.38461539 , 3.115384614 , 0.9346153846 ,

        0.2803846154 , 0.08411538461 , -1 , -0.3 , -0.09 , -0.027 ,

        -0.0081 , -0.00243 , -0.000729 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0]

        [17.60769231 , 3.851538461 , 0.8958461538 , 0.2220230769 ,

        0.05726076923 , 0.01517548352 , 0.004102026923 , 17.30769231

        , 6.923076923 , 2.336538462 , 0.7476923075 , 0.2336538461 ,

        0.07209890111 , 0.02208028846 , -0.3 , -0.09 , -0.027 ,

        -0.0081 , -0.00243 , -0.000729 , -0.0002187 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0]

        [3.551538461 , 0.8958461538 , 0.2310230769 , 0.06131076923 ,

        0.01663348352 , 0.004588026923 , 0.001281678132 , 3.461538461

        , 1.557692308 , 0.5607692308 , 0.1869230769 , 0.06008241758 ,

        0.01892596154 , 0.005888076922 , -0.09 , -0.027 , -0.0081 ,

        -0.00243 , -0.000729 , -0.0002187 , -0.00006561 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0]

        [0.8058461538 , 0.2220230769 , 0.06131076923 , 0.01711948352

        , 0.004831026923 , 0.001375406703 , 0.0003944170385 ,

        0.7788461538 , 0.3738461538 , 0.1401923077 , 0.04806593405 ,

        0.01577163461 , 0.005046923078 , 0.001589780769 , -0.027 ,

        -0.0081 , -0.00243 , -0.000729 , -0.0002187 , -0.00006561 ,

        -0.000019683 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0.1950230769 , 0.05726076923 , 0.01663348352 ,

        0.004831026923 , 0.001406649560 , 0.0004108195385 ,

        0.0001203324105 , 0.1869230769 , 0.09346153846 ,

        0.03604945055 , 0.01261730769 , 0.004205769231 ,

        0.001362669231 , 0.0004335765734 , -0.0081 , -0.00243 ,

        -0.000729 , -0.0002187 , -0.00006561 , -0.000019683 ,

                   -5                                ]
        -0.59049 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0.04916076923 , 0.01517548352 , 0.004588026923 ,

        0.001375406703 , 0.0004108195385 , 0.0001225194105 ,

        0.00003651953538 , 0.04673076923 , 0.02403296703 ,

        0.009462980770 , 0.003364615384 , 0.001135557692 ,

        0.0003716370630 , 0.0001192335577 , -0.00243 , -0.000729 ,

                                                             -5
        -0.0002187 , -0.00006561 , -0.000019683 , -0.59049 10   ,

                    -5                                ]
        -0.177147 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0.01274548352 , 0.004102026923 , 0.001281678132 ,

        0.0003944170385 , 0.0001203324105 , 0.00003651953538 ,

        0.00001104591113 , 0.01201648352 , 0.006308653846 ,

        0.002523461539 , 0.0009084461536 , 0.0003096975524 ,

        0.0001022001923 , 0.00003301852366 , -0.000729 , -0.0002187 ,

                                                -5               -5
        -0.00006561 , -0.000019683 , -0.59049 10   , -0.177147 10   ,

                    -6                                ]
        -0.531441 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [115.3846154 , 17.30769231 , 3.461538461 , 0.7788461538 ,

        0.1869230769 , 0.04673076923 , 0.01201648352 , 115.3846154 ,

        34.61538461 , 10.38461539 , 3.115384614 , 0.9346153846 ,

        0.2803846154 , 0.08411538461 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0.3]

        [34.61538461 , 6.923076923 , 1.557692308 , 0.3738461538 ,

        0.09346153846 , 0.02403296703 , 0.006308653846 , 34.61538461

        , 13.84615384 , 4.673076924 , 1.495384615 , 0.4673076923 ,

        0.1441978022 , 0.04416057692 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0.09]

        [10.38461539 , 2.336538462 , 0.5607692308 , 0.1401923077 ,

        0.03604945055 , 0.009462980770 , 0.002523461539 , 10.38461539

        , 4.673076924 , 1.682307693 , 0.5607692308 , 0.1802472528 ,

        0.05677788462 , 0.01766423077 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0.027]

        [3.115384614 , 0.7476923075 , 0.1869230769 , 0.04806593405 ,

        0.01261730769 , 0.003364615384 , 0.0009084461536 ,

        3.115384614 , 1.495384615 , 0.5607692306 , 0.1922637362 ,

        0.06308653844 , 0.02018769230 , 0.006359123077 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0081]

        [0.9346153846 , 0.2336538461 , 0.06008241758 , 0.01577163461

        , 0.004205769231 , 0.001135557692 , 0.0003096975524 ,

        0.9346153846 , 0.4673076923 , 0.1802472527 , 0.06308653846 ,

        0.02102884615 , 0.006813346155 , 0.002167882867 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.00243]

        [0.2803846154 , 0.07209890111 , 0.01892596154 ,

        0.005046923078 , 0.001362669231 , 0.0003716370630 ,

        0.0001022001923 , 0.2803846154 , 0.1441978022 , 0.05677788462

        , 0.02018769231 , 0.006813346155 , 0.002229822378 ,

        0.0007154013464 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0.000729]

        [0.08411538461 , 0.02208028846 , 0.005888076922 ,

        0.001589780769 , 0.0004335765734 , 0.0001192335577 ,

        0.00003301852366 , 0.08411538461 , 0.04416057692 ,

        0.01766423077 , 0.006359123077 , 0.002167882867 ,

        0.0007154013460 , 0.0002311296656 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0002187]

        [-1 , -0.3 , -0.09 , -0.027 , -0.0081 , -0.00243 , -0.000729

        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 270.2307692 , 175.3000000 ,

        124.8335897 , 95.40200000 , 76.74425384 , 64.05826333 ,

        54.93376746 , -269.2307692 , -80.76923077 , -24.23076929 ,

        -7.269230605 , -2.180769330 , -0.6542308358 , -0.1962691356 ,

        0]

        [-0.3 , -0.09 , -0.027 , -0.0081 , -0.00243 , -0.000729 ,

        -0.0002187 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 175.3000000 ,

        125.5335897 , 96.31200000 , 77.71725384 , 65.05016333 ,

        55.93133746 , 49.07325845 , -175.0000000 , -74.48717948 ,

        -36.63782051 , -20.81961538 , -13.33455128 , -9.319064102 ,

        -6.918150480 , 0]

        [-0.09 , -0.027 , -0.0081 , -0.00243 , -0.000729 , -0.0002187

        , -0.00006561 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 124.8335897 ,

        96.31200000 , 78.04158718 , 65.54611333 , 56.52987946 ,

        49.73943911 , 44.44817799 , -124.7435897 , -66.00641025 ,

        -39.45846154 , -26.01487179 , -18.44185897 , -13.77742019 ,

        -10.69679857 , 0]

        [-0.027 , -0.0081 , -0.00243 , -0.000729 , -0.0002187 ,

        -0.00006561 , -0.000019683 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        95.40200000 , 77.71725384 , 65.54611333 , 56.72939346 ,

        50.07252945 , 44.87665569 , 40.71118341 , -95.37500000 ,

        -58.09730769 , -38.69519231 , -27.56465385 , -20.63668990 ,

        -16.03636574 , -12.82396996 , 0]

        [
        [-0.0081 , -0.00243 , -0.000729 , -0.0002187 , -0.00006561 ,

                                  -5
        -0.000019683 , -0.59049 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        76.74425384 , 65.05016333 , 56.52987946 , 50.07252945 ,

        45.01948159 , 40.96116700 , 37.63159310 , -76.73615384 ,

        -51.37551282 , -36.68744872 , -27.49595961 , -21.37593291 ,

                                       ]
        -17.09686019 , -13.98694308 , 0]

        [
        [-0.00243 , -0.000729 , -0.0002187 , -0.00006561 ,

                                  -5               -5
        -0.000019683 , -0.59049 10   , -0.177147 10   , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 64.05826333 , 55.93133746 , 49.73943911 ,

        44.87665569 , 40.96116700 , 37.74270203 , 35.05124907 ,

        -64.05583333 , -45.81024359 , -34.35522933 , -26.71550007 ,

                                                      ]
        -21.36975042 , -17.48328140 , -14.56901697 , 0]

        [
        [-0.000729 , -0.0002187 , -0.00006561 , -0.000019683 ,

                   -5               -5               -6
        -0.59049 10   , -0.177147 10   , -0.531441 10   , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 54.93376746 , 49.07325845 , 44.44817799 ,

        40.71118341 , 37.63159310 , 35.05124907 , 32.85851610 ,

        -54.93303846 , -41.21449904 , -32.05506724 , -25.64264066 ,

                                                      ]
        -20.97961973 , -17.48272498 , -14.79296859 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -269.2307692 , -175.0000000 , -124.7435897 , -95.37500000 ,

        -76.73615384 , -64.05583333 , -54.93303846 , 269.2307692 ,

        80.76923077 , 24.23076929 , 7.269230605 , 2.180769330 ,

        0.6542308358 , 0.1962691356 , -0.7]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -80.76923077 , -74.48717948 , -66.00641025 , -58.09730769 ,

        -51.37551282 , -45.81024359 , -41.21449904 , 80.76923077 ,

        68.20512820 , 49.04487179 , 34.37000000 , 24.48833333 ,

        17.98389744 , 13.64003173 , -0.21]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -24.23076929 , -36.63782051 , -39.45846154 , -38.69519231 ,

        -36.68744872 , -34.35522933 , -32.05506724 , 24.23076929 ,

        49.04487179 , 45.09974359 , 36.40538461 , 28.65647436 ,

        22.69413237 , 18.25409474 , -0.063]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -7.269230605 , -20.81961538 , -26.01487179 , -27.56465385 ,

        -27.49595961 , -26.71550007 , -25.64264066 , 7.269230605 ,

        34.37000000 , 36.40538461 , 32.21400000 , 27.22118269 ,

        22.81320237 , 19.20548415 , -0.0189]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -2.180769330 , -13.33455128 , -18.44185897 , -20.63668990 ,

        -21.37593291 , -21.36975042 , -20.97961973 , 2.180769330 ,

        24.48833333 , 28.65647436 , 27.22118269 , 24.33290491 ,

        21.33883802 , 18.63883554 , -0.00567]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -0.6542308358 , -9.319064102 , -13.77742019 , -16.03636574 ,

        -17.09686019 , -17.48328140 , -17.48272498 , 0.6542308358 ,

        17.98389744 , 22.69413237 , 22.81320237 , 21.33883802 ,

        19.41538745 , 17.47938644 , -0.001701]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -0.1962691356 , -6.918150480 , -10.69679857 , -12.82396996 ,

        -13.98694308 , -14.56901697 , -14.79296859 , 0.1962691356 ,

        13.64003173 , 18.25409474 , 19.20548415 , 18.63883554 ,

        17.47938644 , 16.13667830 , -0.0005103]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.3 , 0.09 , 0.027 , 0.0081 ,

        0.00243 , 0.000729 , 0.0002187 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -0.7 , -0.21 , -0.063 , -0.0189 , -0.00567 , -0.001701 ,

        -0.0005103 , 0]

> print(MM);

        [                                                    -5
        [0.0002500000000 , 0.00003750000000 , 0.7500000001 10   ,

                       -5                  -6                  -6
        0.1687500000 10   , 0.4050000000 10   , 0.1012500000 10   ,

                       -7
        0.2603571429 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

                                                   ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                                  -5                  -5
        [0.00003750000000 , 0.7500000001 10   , 0.1687500000 10   ,

                       -6                  -6                  -7
        0.4050000000 10   , 0.1012500000 10   , 0.2603571429 10   ,

                       -8
        0.6834375001 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

                                                   ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [               -5                  -5                  -6
        [0.7500000001 10   , 0.1687500000 10   , 0.4050000000 10   ,

                       -6                  -7                  -8
        0.1012500000 10   , 0.2603571429 10   , 0.6834375001 10   ,

                       -8
        0.1822500000 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

                                                   ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [               -5                  -6                  -6
        [0.1687500000 10   , 0.4050000000 10   , 0.1012500000 10   ,

                       -7                  -8                  -8
        0.2603571429 10   , 0.6834375001 10   , 0.1822500000 10   ,

                       -9
        0.4920750000 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

                                                   ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [               -6                  -6                  -7
        [0.4050000000 10   , 0.1012500000 10   , 0.2603571429 10   ,

                       -8                  -8                  -9
        0.6834375001 10   , 0.1822500000 10   , 0.4920750000 10   ,

                       -9
        0.1342022727 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

                                                   ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [               -6                  -7                  -8
        [0.1012500000 10   , 0.2603571429 10   , 0.6834375001 10   ,

                       -8                  -9                  -9
        0.1822500000 10   , 0.4920750000 10   , 0.1342022727 10   ,

                       -10
        0.3690562500 10    , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

                                                     ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [               -7                  -8                  -8
        [0.2603571429 10   , 0.6834375001 10   , 0.1822500000 10   ,

                       -9                  -9                  -10
        0.4920750000 10   , 0.1342022727 10   , 0.3690562500 10    ,

                       -10
        0.1022001923 10    , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

                                                     ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.009000000000 , 0.002025000000

        , 0.0004860000000 , 0.0001215000000 , 0.00003124285714 ,

                       -5                  -5
        0.8201250000 10   , 0.2187000000 10   , 0 , 0 , 0 , 0 , 0 , 0

                                           ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.002025000000 , 0.0004860000000

                                                              -5
        , 0.0001215000000 , 0.00003124285714 , 0.8201250000 10   ,

                       -5                  -6
        0.2187000000 10   , 0.5904900000 10   , 0 , 0 , 0 , 0 , 0 , 0

                                           ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0004860000000 ,

                                                            -5
        0.0001215000000 , 0.00003124285714 , 0.8201250000 10   ,

                       -5                  -6                  -6
        0.2187000000 10   , 0.5904900000 10   , 0.1610427273 10   , 0

                                                               ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0001215000000 ,

                                          -5                  -5
        0.00003124285714 , 0.8201250000 10   , 0.2187000000 10   ,

                       -6                  -6                  -7
        0.5904900000 10   , 0.1610427273 10   , 0.4428675000 10   , 0

                                                               ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.00003124285714 ,

                       -5                  -5                  -6
        0.8201250000 10   , 0.2187000000 10   , 0.5904900000 10   ,

                       -6                  -7                  -7
        0.1610427273 10   , 0.4428675000 10   , 0.1226402308 10   , 0

                                                               ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                                           -5
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.8201250000 10   ,

                       -5                  -6                  -6
        0.2187000000 10   , 0.5904900000 10   , 0.1610427273 10   ,

                       -7                  -7                  -8
        0.4428675000 10   , 0.1226402308 10   , 0.3416406429 10   , 0

                                                               ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                                           -5
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.2187000000 10   ,

                       -6                  -6                  -7
        0.5904900000 10   , 0.1610427273 10   , 0.4428675000 10   ,

                       -7                  -8                  -9
        0.1226402308 10   , 0.3416406429 10   , 0.9565938000 10   , 0

                                                               ]
        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.0005833333334 , 0.0003791666667 , 0.0002702777778 ,

        0.0002066458333 , 0.0001662616667 , 0.0001387876389 ,

        0.0001190215833 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.0003791666667 , 0.0002702777778 , 0.0002066458333 ,

        0.0001662616667 , 0.0001387876389 , 0.0001190215833 ,

        0.0001041598323 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.0002702777778 , 0.0002066458333 , 0.0001662616667 ,

        0.0001387876389 , 0.0001190215833 , 0.0001041598323 ,

        0.00009259077010 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.0002066458333 , 0.0001662616667 , 0.0001387876389 ,

        0.0001190215833 , 0.0001041598323 , 0.00009259077010 ,

        0.00008333284126 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.0001662616667 , 0.0001387876389 , 0.0001190215833 ,

        0.0001041598323 , 0.00009259077010 , 0.00008333284126 ,

        0.00007575744156 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.0001387876389 , 0.0001190215833 , 0.0001041598323 ,

        0.00009259077010 , 0.00008333284126 , 0.00007575744156 ,

        0.00006944440754 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.0001190215833 , 0.0001041598323 , 0.00009259077010 ,

        0.00008333284126 , 0.00007575744156 , 0.00006944440754 ,

        0.00006410255389 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.1143333333 , 0.05430833333 ,

        0.02789733333 , 0.01549216667 , 0.009249566667 ,

        0.005885165417 , 0.003951226611 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.05430833333 , 0.02789733333 ,

        0.01549216667 , 0.009249566667 , 0.005885165417 ,

        0.003951226611 , 0.002773360038 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.02789733333 , 0.01549216667 ,

        0.009249566667 , 0.005885165417 , 0.003951226611 ,

        0.002773360038 , 0.002019034957 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.01549216667 , 0.009249566667 ,

        0.005885165417 , 0.003951226611 , 0.002773360038 ,

        0.002019034957 , 0.001514838824 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.009249566667 , 0.005885165417 ,

        0.003951226611 , 0.002773360038 , 0.002019034957 ,

        0.001514838824 , 0.001165416432 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.005885165417 , 0.003951226611 ,

        0.002773360038 , 0.002019034957 , 0.001514838824 ,

        0.001165416432 , 0.0009157277406 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.003951226611 , 0.002773360038 ,

        0.002019034957 , 0.001514838824 , 0.001165416432 ,

        0.0009157277406 , 0.0007325943448 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

> lambda:=array(1..2*(n+m)+L); # lambda^2 = l^2*omega^2*rho*A/EI
> lambda:=evalf(Eigenvals(KK,MM,vecs));

                     lambda := array(1 .. 29, [])


            [
  lambda := [Float(-infinity), Float(-infinity), Float(-infinity),

        550584.2323, 24437.43470, Float(infinity), Float(-infinity),

        Float(-infinity), Float(-infinity), Float(-infinity),

                       7                 7                 7
        0.1822553724 10 , 0.1616699128 10 , 0.1237734523 10 ,

                       7
        0.1071280557 10 , 715128.6698, -65878.84597, 116992.3079,

        263960.9230, 315743.9929, 625427.6204, 581115.1046,

        492864.3727, 461546.6372, 83043.01372, 20395.54703,

                                                           ]
        -4583.023165, 8797.314148, 56.61189692, 871.0481328]

Salida de archivo a Matlab
> res11:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/masa.csv",WRITE,TEXT);
> res22:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/rigi.csv",WRITE,TEXT);
Error, (in fopen) file or directory does not exist

Error, (in fopen) file or directory does not exist

> writedata(res22,KK,float):writedata(res11,MM,float);
> fclose(res11):fclose(res22):
> #print(MM);
> #s:=det(xx*MM-KK);
> #plot(0.0000000001*s,xx=15..70);
> #ss:=evalf(solve(s=0));
> Omega:=array(1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do;
> #Omega[i]:=evalf(lambda[i]^0.5/Pi^2):
> omega[i]:=evalf(lambda[i]^0.25);
> writestat(res,"frec=","=",omega[i]):
> #Omega[i]:=evalf(lambda[i]^0.25);
> end do;

           omega[1] := Float(infinity) + Float(undefined) I


                                  49


           omega[2] := Float(infinity) + Float(undefined) I


                                  49


           omega[3] := Float(infinity) + Float(undefined) I


                                  49


                       omega[4] := 27.23992719


                                  26


                       omega[5] := 12.50299057


                                  26


                     omega[6] := Float(infinity)


                                  30


           omega[7] := Float(infinity) + Float(undefined) I


                                  49


           omega[8] := Float(infinity) + Float(undefined) I


                                  49


           omega[9] := Float(infinity) + Float(undefined) I


                                  49


          omega[10] := Float(infinity) + Float(undefined) I


                                  49


                       omega[11] := 36.74261691


                                  26


                       omega[12] := 35.65802630


                                  26


                       omega[13] := 33.35468750


                                  26


                       omega[14] := 32.17183300


                                  26


                       omega[15] := 29.08011016


                                  26


               omega[16] := 11.32847623 + 11.32847623 I


                                  40


                       omega[17] := 18.49436085


                                  26


                       omega[18] := 22.66652322


                                  26


                       omega[19] := 23.70466238


                                  26


                       omega[20] := 28.12187440


                                  26


                       omega[21] := 27.60994497


                                  26


                       omega[22] := 26.49609404


                                  26


                       omega[23] := 26.06477005


                                  26


                       omega[24] := 16.97562510


                                  26


                       omega[25] := 11.95043845


                                  26


               omega[26] := 5.817990600 + 5.817990600 I


                                  40


                       omega[27] := 9.684730170


                                  26


                       omega[28] := 2.743007069


                                  26


                       omega[29] := 5.432635141


                                  26

> fclose(res);
> convert(omega,'list'):sort(%);

  [Float(infinity), 11.32847623 + 11.32847623 I, 27.23992719,

        22.66652322, 28.12187440, 9.684730170, 29.08011016,

        27.60994497, 26.49609404, 35.65802630, 26.06477005,

        18.49436085, 2.743007069,

        Float(infinity) + Float(undefined) I,

        Float(infinity) + Float(undefined) I,

        Float(infinity) + Float(undefined) I,

        Float(infinity) + Float(undefined) I,

        Float(infinity) + Float(undefined) I,

        Float(infinity) + Float(undefined) I,

        Float(infinity) + Float(undefined) I, 16.97562510,

        23.70466238, 5.817990600 + 5.817990600 I, 5.432635141,

        11.95043845, 33.35468750, 36.74261691, 32.17183300,

        12.50299057]

Formas Modales
Autovalores
> for i from 1 by 1 to 2*(n+m)+L do:
> v[i]:=array(1..2*(n+m)+L,1..1):
> v[i]:= linalg[submatrix](vecs, 1..2*(n+m)+L, i..i):
> end do:
> #print(v[29]):
> #print(vecs);
> print(v[42]); 

                                v[42]

> norm(v[4]);

                   1.00000000000000000000000000000

Forma modal
> for dib from 1 by 1 to 2*(n+m)+L do:
> W1[dib]:=sum(vecs[ii+m,dib]*w1[ii],ii=1..n):
> Phi1[dib]:=sum(vecs[ii,dib]*phi1[ii],ii=1..m):
> W2[dib]:=sum(vecs[ii+m+n+m,dib]*w2[ii],ii=1..n);
> Phi2[dib]:=sum(vecs[ii+m+n,dib]*phi2[ii],ii=1..m);
> end do:
> with(plots):
> dib:=33:
Warning, the name changecoords has been redefined

> P1:=plot({100000000000000000*W1[dib]},x=0..c[1]):
> P2:=plot({100000000000000000*W2[dib]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> display({P1});
> display({P1,P2});
Plotting error, empty plot
Plotting error, empty plot
Normalización
> #for i from 1 by 1 to 2*(n+m)+L do:
> #nL2W1[i]:=int((W1[i])^2,x=0..c[1]):
> #nL2W2[i]:=int((W2[i])^2,x=c[1]..1):
> #nL2Phi1[i]:=int((Phi1[i])^2,x=0..c[1]):
> #nL2Phi2[i]:=int((Phi2[i])^2,x=c[1]..1):
> #W1[i]:=W1[i]/(nL2W1[i])^0.5;
> #W2[i]:=W2[i]/(nL2W2[i])^0.5;
> #Phi1[i]:=Phi1[i]/(nL2Phi1[i])^0.5;
> #Phi2[i]:=Phi2[i]/(nL2Phi2[i])^0.5;
>  #end do:
> WW139:=plot({W1[39]},x=0..c[1]):
> WW239:=plot({W2[39]},x=c[1]..1):
> WW140:=plot({W1[40]},x=0..c[1]):
> WW240:=plot({W2[40]},x=c[1]..1):
> WW141:=plot({W1[41]},x=0..c[1]):
> WW241:=plot({W2[41]},x=c[1]..1):
> WW142:=plot({W1[42]},x=0..c[1]):
> WW242:=plot({W2[42]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> W11x:=plot({diff(W1[dib],x)},x=0..c[1]):
> W11xxx:=plot({diff(W1[dib],x$3)},x=0..c[1]):
> Phi11:=plot({Phi1[dib]},x=0..c[1]):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> 
> W22x:=plot({diff(W2[dib],x)},x=c[1]..1):
> W22xxx:=plot({diff(W2[dib],x$3)},x=c[1]..1):
> Phi22:=plot({Phi21[dib]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> 
> evalf(subs(x=0.5,W2[dib]));
> evalf(subs(x=0.5,W1[dib]));
> evalf(subs(x=0.5,Phi2[dib]));
> evalf(subs(x=0.5,Phi1[dib]));

                                W2[33]


                                W1[33]


                               Phi2[33]


                               Phi1[33]

> evalf(subs(x=0.5,Phi1[dib]));

                               Phi1[33]

> #plot({W1[dib],diff(W1[dib],x)},x=0..c[1]);
> #plot({W2[dib]},x=c[1]..1);
> #plot({Phi1[dib]},x=0..c[1]);
> #plot({Phi2[dib]},x=c[1]..1);
> display({WW142,WW242});
> display({WW141,WW241});
> display({WW139,WW239});
> #display({100000*W11xxx,100000*W22xxx});
> #display({W11,W22,W11x,W22x});
Plotting error, empty plot
Plotting error, empty plot
Plotting error, empty plot
Normalizar
> nL2:=int((W1[39])^2,x=0..0.5);

                                           2
                          nL2 := 0.5 W1[39]


          nn := 0.008343975305128818107528826388809051070708

> WN1[39]:=W1[39]/nL2^0.5;

                                                     W1[39]
       WN1[39] := 1.41421356237309504880168872421 ------------
                                                         2 0.5
                                                  (W1[39] )

> plot(WN1[39],x=0..0.5);
Plotting error, empty plot
> plot(W1[39],x=0..0.5);
Plotting error, empty plot
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
