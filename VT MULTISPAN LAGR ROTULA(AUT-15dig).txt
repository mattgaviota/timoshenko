VIGAS TIMOSHENKO - MULTIPLICADORES  DE LAGRANGE
Espesor Uniforme - Isotropía - Condiciones de bordes elásticas y rótula intermedia
06/10/06
Utilizamos la base 1,x,x^2... 
Analisis Dinámico: FUNCIONA
Corregido a media para aplicar Lagrange con rótula y restriccines elásticas intermedias
(Ver Paper "Free Vibration of Multi-span Timoshenko Beams using static Timoshenko Beams functions" Journal of sound and vibrations, D. Zhou)
Aproxima la Funcion Wtotal y Phi de flexión.


> restart; a:=15: Digits:=a: 
> with(linalg):

Warning, the protected names norm and trace have been redefined and unprotected

Archivo para escribir los resultados

> res:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/ISOTROPA/PSk 4.csv",WRITE,TEXT);
> writestat(res,'n','m','r','Frecuencia'):
Error, (in fopen) file or directory does not exist

Números de Polinomios en cada Dirección (se supone la misma cantidad en las dos direcciones)
> n:=7:  # Dirección Girof
> m:=n:  # Dirección W
> writestat(res,"n =",n,"m =",m,"Digitos=",a):

Datos
Longitud de la viga(ojo con los datos)
> nu:=0.30:
> alpha:=0.1: ks:=5/6:  Gamma:=ks/(2*(1.0+nu)): # Gamma:=1/5; #alpha=r/l: 
> #alpha:=0.002: ks:=0.866666667:  Gamma:=ks/(2*(1.0+nu)): # Gamma:=1/5; #alpha=r/l: 

> l:=1.0:                r:=alpha/(12)^0.5; r*12^0.5/l:

                       r := 0.0288675134594813

Constantes de los Resortes en los bordes de la viga
> T1:=0; :T2:=0;     R1:=0;  R2:=0;
> #T1:=1.; :T2:=10.;     R1:=100.0;  R2:=0;
> #T1:=10.0^8;T2:=10.0^3;R1:=100.0;R2:=0;

                               T1 := 0


                               T2 := 0


                               R1 := 0


                               R2 := 0

> writestat(res,"T1",T1,"T2",T2,"R1",R1,"R2",R2):
Ubicación del Resorte Intermedio
> c[1]:=0.3: 
> Tc:=0; Rc:=0;
> R12:=1:

                               Tc := 0


                               Rc := 0

Condiciones de Borde de la Viga (  w1:Desplazamiento por flexion 1 tramo, w2:Desplazamiento por flexión 2 tramo) 
> c1:=c[1]:
> writestat(res,"c",c1,"k",ks,"h/l",alpha):
Condiciones de controno:  1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF- 6 ->FS  
> 
> ccf1:=2:  #(W tramo 1)
> ccg1:=5:  #(Phi tramo 1)
> ccf2:=6: #(W tramo 2)
> ccg2:=5: #(Phi tramo 2)
Condicines impuestas por los multiplicadores de Lagrange(L=1 para el caso de vigas con articulacion)
> L:=1: #Cantidad de condiciones


Subrutina para determinar las condiciones de contorno(xb: determina el que borde estamos: 0,1)
ccc = 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF 
> calccc := proc( cc,p,x1,x2)
> if (cc=1) then:
> p[1]:=(x-x1)*(x-x2):
> elif (cc=2) then: 
> p[1]:=(x-x1):
> elif (cc=3) then: 
> p[1]:=(x-x1)^2:
> elif (cc=4) then: 
> p[1]:=(x-x1)^2*(x-x2):
> elif(cc=5) then:
> p[1]:=1:
> elif(cc=6) then:
> p[1]:=(x2-x):
> end if:
> return p:
> end proc:
Subrutina para calcular los polinomios simples
> calcps := proc( pp1,nn,p,p0,p1,px,px0,px1,pxx,x1,x2) global i:
>   p[1]:=pp1:
>   p0[1]:=subs(x=x1,p[1]);
>   p1[1]:=subs(x=x2,p[1]);
>   for i from 2 by 1 to nn do:
>      p[i]:=expand(p[i-1]*x):
>      p0[i]:=subs(x=x1,p[i]);
            
>   p1[i]:=subs(x=x2,p[i]):
>   end do:
>   for i from 1 by 1 to n do:
>      px[i]:=diff(p[i],x): pxx[i]:=diff(p[i],x$2): 
>      px0[i]:=subs(x=x1,px[i]);px1[i]:=subs(x=x2,px[i]):
>   end do:
>   return p,p0,p1,px,px0,px1,pxx
> end proc:
ccf1: indica la condición de contorno de Wf en el primer tramo: 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF  
> 
1 Tramo: 
> 
> x1:=0: x2:=c1:
> calccc( ccf1,w1,x1,x2):
> calcps (w1[1],n,w1,w10,w11,w1x,w1x0,w1x1,w1xx,x1,x2):
> calccc( ccg1,phi1,x1,x2):
> calcps (phi1[1],m,phi1,phi10,phi11,phi1x,phi1x0,phi1x1,phi1xx,x1,x2):
> print(phi1);print(phi10);print(phi11);
> print(w1);print(w10);print(w11);

                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


       table([1 = 1, 2 = 0, 3 = 0, 5 = 0, 4 = 0, 7 = 0, 6 = 0])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])


                     2       3       5       4       7
  table([1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x ,

             6
        6 = x

        ])


       table([1 = 0, 2 = 0, 3 = 0, 5 = 0, 4 = 0, 7 = 0, 6 = 0])


  table([1 = 0.3, 2 = 0.09, 3 = 0.027, 5 = 0.00243, 4 = 0.0081,

        7 = 0.0002187,

        6 = 0.000729

        ])

ccf2: indica la condición de contorno de Wf en el segundo tramo: 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF  
> 
2 Tramo: 
> 
> x1:=c1: x2:=1:
> calccc( ccf2,w2,x1,x2):
> calcps (w2[1],n,w2,w20,w21,w2x,w2x0,w2x1,w2xx,x1,x2):
> calccc( ccg2,phi2,x1,x2):
> calcps (phi2[1],m,phi2,phi20,phi21,phi2x,phi2x0,phi2x1,phi2xx,x1,x2):
> print(phi1);print(phi2);print(phi21);
> print(w1); print(w2);
> #print(w1);print(w1x);print(w21);

                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


       table([1 = 1, 2 = 1, 3 = 1, 5 = 1, 4 = 1, 7 = 1, 6 = 1])


                     2       3       5       4       7
  table([1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x ,

             6
        6 = x

        ])


                             2       2    3       4    5       3    4
  table([1 = 1 - x, 2 = x - x , 3 = x  - x , 5 = x  - x , 4 = x  - x

               6    7
        , 7 = x  - x ,

             5    6
        6 = x  - x

        ])

Energía ( Forma Lineal) 
> print(phi1); print(phi2);

                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])

Matrices de masa de cada tramo 
> E:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do;
>    for j from 1 by 1 to n do;
>       E[i,j,1]:=int((r/l)^2*phi1[j]*phi1[i],x=0..c[1]):
>       E[i,j,2]:=int((r/l)^2*phi2[j]*phi2[i],x=c[1]..l):
>    end do;
> end do;
> F:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>       F[i,j,1]:=int(w1[j]*w1[i],x=0..c[1]):
>       F[i,j,2]:=int(w2[j]*w2[i],x=c[1]..1):
>    end do:
> end do:
> #print(F);
MM: Matriz que multiplica al autovalor: Matriz de Masa
> 
> M:=array(1..n+m,1..n+m,1..2):
> for i from 1 by 1 to n+m do:
>    for j from 1 by 1 to n+m do:
>       M[i,j,1]:=0:  M[i,j,2]:=0:  
>    end do:
> end do:
> for t from 1 by 1 to 2 do:
>    for i from 1 by 1 to n+m do:
>      if (i<=n) then:
>        for j from 1 by 1 to n+m do:                 
>           if (j<=n) then:
>              M[i,j,t]:=E[i,j,t]:
>           end if:
>        end do:  
>      else:
>        for j from 1 by 1 to n+m do:
>          if (j>n) then:
>              M[i,j,t]:=F[i-n,j-n,t]:
>          end if:
>        end do:
>      end if:
>    end do:
> end do:
> #print(E); print(M);
> 
MM
> 
> MM:=array(1..2*(n+m)+L,1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do:
>   for j from 1 by 1 to 2*(n+m)+L do:
>      MM[i,j]:=0:  
>   end do:
> end do:
> for i from 1 by 1 to 2*(n+m) do:
>   for j from 1 by 1 to 2*(n+m) do:
>      if (i<=(n+m)) then:                     
>         if (j<=(n+m)) then:
>            MM[i,j]:=M[i,j,1]:
>         end if:
>      else
>         if (j>(n+m)) then:
>            MM[i,j]:=M[i-(n+m),j-(n+m),2]:
>         end if:  
>      end if:
>   end do:
> end do:
> #print(MM);print(F);
Prueba:
> for i from 1 by 1 to n+m do;
>   for j from 1 by 1 to n+m do;
>      t:=i+j:
>      v1[t]:=is(MM[i,j]=M[i,j,1]);  
>      v2[t]:=is(MM[i+n+m,j+n+m]=M[i,j,2]);  
>   end do;
> end do;
> #print(v1);print(v2);
> print(w1);print(w1x);

                     2       3       5       4       7
  table([1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x ,

             6
        6 = x

        ])


                                2         4         3         6
  table([1 = 1, 2 = 2 x, 3 = 3 x , 5 = 5 x , 4 = 4 x , 7 = 7 x ,

               5
        6 = 6 x

        ])

Matrices de rigidez de cada tramo
Denxn
> De:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do:
>    for j from 1 by 1 to n do:
>     De[i,j,1]:=int(Gamma*(l/r)^2*w1x[i]*w1x[j],x=0..c[1])+T1*w10[j]*w10[i]+Tc*w11[j]*w11[i]:               
>     De[i,j,2]:=int(Gamma*(l/r)^2*w2x[i]*w2x[j],x=c[1]..1)+T2*w21[j]*w21[i]:
>    end do:
> end do:
Bmxm
> B:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>       B[i,j,1]:=int(Gamma*(l/r)^2*w1x[j]*phi1[i],x=0..c[1]):
>       B[i,j,2]:=int(Gamma*(l/r)^2*w2x[j]*phi2[i],x=c[1]..1):
>    end do:
> end do:
Cnxn
> C:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do:
>    for j from 1 by 1 to n do:
>       C[i,j,1]:=int(Gamma*(l/r)^2*w1x[i]*phi1[j],x=0..c[1]):
>       C[i,j,2]:=int(Gamma*(l/r)^2*w2x[i]*phi2[j],x=c[1]..1):
>    end do:
> end do:
Amxm
> A:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>        A[i,j,1]:=int(Gamma*(l/r)^2*phi1[j]*phi1[i]+phi1x[j]*phi1x[i],x=0..c[1]):
>        A[i,j,1]:=A[i,j,1]+R1*phi10[j]*phi10[i]+Rc*phi11[j]*phi11[i]+R12*phi11[i]*phi11[j]:          
>        A[i,j,2]:=int(Gamma*(l/r)^2*phi2[i]*phi2[j]+phi2x[i]*phi2x[j],x=c[1]..1):
>        A[i,j,2]:=A[i,j,2]+R2*phi21[i]*phi21[j]+R12*phi20[i]*phi20[j]:
>    end do:
> end do:
AAmxm
> AA:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>        AA[i,j,1]:=-R12*phi11[i]*phi20[j]:
>        AA[i,j,2]:=-R12*phi11[j]*phi20[i]:
>    end do:
> end do:
> print(phi11);print(phi20);

  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])

> #print(AA);
KK: Matriz de Rigidez total
> K1:=array(1..(n+m),1..(n+m),1..2):
> for t from 1 by 1 to 2 do:
>    for i from 1 by 1 to n+m do:
>       if (i<=n) then:
>          for j from 1 by 1 to n+m do:  
>             if (j<=n) then:
>                 K1[i,j,t]:=A[i,j,t]:
>             else:
>                 K1[i,j,t]:=B[i,j-n,t]:
>             end if:
>          end do:
>        else:
>          for j from 1 by 1 to n+m do:
>            if (j<=n) then:
>                K1[i,j,t]:=C[i-n,j,t]:
>            else:
>                K1[i,j,t]:=De[i-n,j-n,t]:
>            end if:
>          end do:
>       end if:
>    end do:
> end do:
> #print(K1);
Prueba:
> t:=0:
> for i from 1 by 1 to n do;
>   for j from 1 by 1 to n do;     
>      t:=t+1:
>      v11[t]:=is(K1[i,j,1]=A[i,j,1]);  
>      v22[t]:=is(K1[i,j+n,1]=B[i,j,1]);  
>      v33[t]:=is(K1[i+n,j,2]=C[i,j,2]);  
>      v44[t]:=is(K1[i+n,j+n,2]=De[i,j,2]);  
>   end do;
> end do;
> #print(v11);print(v22);print(v33);print(v44);
KK
> 
> KK:=array(1..2*(n+m)+L,1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do:
>   for j from 1 by 1 to 2*(n+m)+L do:
>      KK[i,j]:=0:  
>   end do:
> end do:
> for i from 1 by 1 to 2*(n+m) do:
>    if (i<=(n+m)) then:
>        for j from 1 by 1 to 2*(n+m) do:                 
>           if (j<=(n+m)) then:
>              KK[i,j]:=K1[i,j,1]:
>           end if:
>         end do:  
>    else:
>        for j from 1 by 1 to 2*(n+m) do:
>           if (j>(n+m)) then:
>              KK[i,j]:=K1[i-(n+m),j-(n+m),2]:
>           end if:
>        end do:
>    end if:
>    for j from 1 by 1 to 2*(n+m) do:                 
>        if (i<=n) then:
>           if (j>n+m and j<=2*n+m) then:
>              KK[i,j]:=AA[i,j-(n+m),1]:
>           end if:
>        end if: 
>        if (i > (n+m) and i <= 2*n+m ) then:
>           if (j<=n) then:
>              KK[i,j]:=AA[i-(n+m),j,2]:
>           end if:
>        end if:
>     end do:   
> end do:
> 
> print(w11);print(w20);

  table([1 = 0.3, 2 = 0.09, 3 = 0.027, 5 = 0.00243, 4 = 0.0081,

        7 = 0.0002187,

        6 = 0.000729

        ])


  table([1 = 0.7, 2 = 0.21, 3 = 0.063, 5 = 0.00567, 4 = 0.0189,

        7 = 0.0005103,

        6 = 0.001701

        ])

> #print(KK);
Condiciones impuesta por los multiplicadores 1 fila por cada condición extra
> for i from 1 by 1 to n do:
Esta condición vale para cuando existe rótula 
> 
>       KK[2*(n+m)+1,i+m]:=w11[i]:
>       KK[2*(n+m)+1,i+2*m+n]:=-w20[i]:
>       KK[i+m,2*(n+m)+1]:=w11[i]:
>       KK[i+2*m+n,2*(n+m)+1]:=-w20[i]:
 
>      Esta condicion vale para reproducir dos span.
> 
>       #KK[2*(n+m)+1,i]:=phi11[i]:
>       #KK[2*(n+m)+1,i+m+n]:=-phi20[i]:
>       #KK[i,2*(n+m)+1]:=phi11[i]:
>       #KK[i+m+n,2*(n+m)+1]:=-phi20[i]:
> end do:
> print(w11);print(w20);
> print(phi11);print(phi20);

  table([1 = 0.3, 2 = 0.09, 3 = 0.027, 5 = 0.00243, 4 = 0.0081,

        7 = 0.0002187,

        6 = 0.000729

        ])


  table([1 = 0.7, 2 = 0.21, 3 = 0.063, 5 = 0.00567, 4 = 0.0189,

        7 = 0.0005103,

        6 = 0.001701

        ])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])

> #for i from 1 by 1 to 2*(n+m)+L do:
>  #  for j from 1 by 1 to 2*(n+m)+L do:
>   #   if(is(KK[i,j]=KK[j,i])=true) then
>    #  else
>     #     print(KK[i,j],i,j);
>      #end if:
>    #end do:
> #end do:
> #print(AA);
Calculo de Autovalores y Autovectores
> #print(phi2);
> print(KK);

        [116.384615384615 , 17.6076923076923 , 3.55153846153846 ,

        0.805846153846153 , 0.195023076923077 , 0.0491607692307692 ,

        0.0127454835164835 , 115.384615384615 , 34.6153846153846 ,

        10.3846153846154 , 3.11538461538462 , 0.934615384615383 ,

        0.280384615384614 , 0.0841153846153845 , -1 , -0.3 , -0.09 ,

        -0.027 , -0.0081 , -0.00243 , -0.000729 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0]

        [17.6076923076923 , 3.85153846153846 , 0.895846153846153 ,

        0.222023076923077 , 0.0572607692307692 , 0.0151754835164835 ,

        0.00410202692307692 , 17.3076923076923 , 6.92307692307691 ,

        2.33653846153845 , 0.747692307692308 , 0.233653846153846 ,

        0.0720989010989009 , 0.0220802884615384 , -0.3 , -0.09 ,

        -0.027 , -0.0081 , -0.00243 , -0.000729 , -0.0002187 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0]

        [3.55153846153846 , 0.895846153846153 , 0.231023076923077 ,

        0.0613107692307692 , 0.0166334835164835 , 0.00458802692307692

        , 0.00128167813186813 , 3.46153846153846 , 1.55769230769231 ,

        0.560769230769229 , 0.186923076923077 , 0.0600824175824175 ,

        0.0189259615384615 , 0.00588807692307692 , -0.09 , -0.027 ,

        -0.0081 , -0.00243 , -0.000729 , -0.0002187 , -0.00006561 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0.805846153846153 , 0.222023076923077 , 0.0613107692307692 ,

        0.0171194835164835 , 0.00483102692307692 ,

        0.00137540670329670 , 0.000394417038461538 ,

        0.778846153846153 , 0.373846153846153 , 0.140192307692307 ,

        0.0480659340659341 , 0.0157716346153846 , 0.00504692307692306

        , 0.00158978076923077 , -0.027 , -0.0081 , -0.00243 ,

        -0.000729 , -0.0002187 , -0.00006561 , -0.000019683 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0]

        [
        [0.195023076923077 , 0.0572607692307692 , 0.0166334835164835

        , 0.00483102692307692 , 0.00140664956043956 ,

        0.000410819538461538 , 0.000120332410489510 ,

        0.186923076923077 , 0.0934615384615383 , 0.0360494505494504 ,

        0.0126173076923077 , 0.00420576923076922 ,

        0.00136266923076923 , 0.000433576573426573 , -0.0081 ,

        -0.00243 , -0.000729 , -0.0002187 , -0.00006561 ,

                                  -5                                ]
        -0.000019683 , -0.59049 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0.0491607692307692 , 0.0151754835164835 ,

        0.00458802692307692 , 0.00137540670329670 ,

        0.000410819538461538 , 0.000122519410489510 ,

        0.0000365195353846154 , 0.0467307692307692 ,

        0.0240329670329670 , 0.00946298076923074 ,

        0.00336461538461539 , 0.00113555769230769 ,

        0.000371637062937062 , 0.000119233557692308 , -0.00243 ,

        -0.000729 , -0.0002187 , -0.00006561 , -0.000019683 ,

                   -5               -5
        -0.59049 10   , -0.177147 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

         ]
        0]

        [
        [0.0127454835164835 , 0.00410202692307692 ,

        0.00128167813186813 , 0.000394417038461538 ,

        0.000120332410489510 , 0.0000365195353846154 ,

        0.0000110459111344809 , 0.0120164835164835 ,

        0.00630865384615384 , 0.00252346153846153 ,

        0.000908446153846155 , 0.000309697552447552 ,

        0.000102200192307692 , 0.0000330185236686390 , -0.000729 ,

                                                             -5
        -0.0002187 , -0.00006561 , -0.000019683 , -0.59049 10   ,

                    -5               -6
        -0.177147 10   , -0.531441 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

         ]
        0]

        [115.384615384615 , 17.3076923076923 , 3.46153846153846 ,

        0.778846153846153 , 0.186923076923077 , 0.0467307692307692 ,

        0.0120164835164835 , 115.384615384615 , 34.6153846153846 ,

        10.3846153846154 , 3.11538461538462 , 0.934615384615383 ,

        0.280384615384614 , 0.0841153846153845 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.3]

        [34.6153846153846 , 6.92307692307691 , 1.55769230769231 ,

        0.373846153846153 , 0.0934615384615383 , 0.0240329670329670 ,

        0.00630865384615384 , 34.6153846153846 , 13.8461538461539 ,

        4.67307692307691 , 1.49538461538461 , 0.467307692307692 ,

        0.144197802197802 , 0.0441605769230769 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.09]

        [10.3846153846154 , 2.33653846153845 , 0.560769230769229 ,

        0.140192307692307 , 0.0360494505494504 , 0.00946298076923074

        , 0.00252346153846153 , 10.3846153846154 , 4.67307692307691 ,

        1.68230769230769 , 0.560769230769229 , 0.180247252747252 ,

        0.0567778846153844 , 0.0176642307692307 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.027]

        [3.11538461538462 , 0.747692307692308 , 0.186923076923077 ,

        0.0480659340659341 , 0.0126173076923077 , 0.00336461538461539

        , 0.000908446153846155 , 3.11538461538462 , 1.49538461538462

        , 0.560769230769231 , 0.192263736263736 , 0.0630865384615385

        , 0.0201876923076923 , 0.00635912307692310 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0081]

        [0.934615384615383 , 0.233653846153846 , 0.0600824175824175 ,

        0.0157716346153846 , 0.00420576923076922 ,

        0.00113555769230769 , 0.000309697552447552 ,

        0.934615384615383 , 0.467307692307692 , 0.180247252747252 ,

        0.0630865384615384 , 0.0210288461538461 , 0.00681334615384613

        , 0.00216788286713286 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0.00243]

        [0.280384615384614 , 0.0720989010989009 , 0.0189259615384615

        , 0.00504692307692306 , 0.00136266923076923 ,

        0.000371637062937062 , 0.000102200192307692 ,

        0.280384615384614 , 0.144197802197802 , 0.0567778846153844 ,

        0.0201876923076922 , 0.00681334615384613 ,

        0.00222982237762237 , 0.000715401346153844 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.000729]

        [0.0841153846153845 , 0.0220802884615384 ,

        0.00588807692307692 , 0.00158978076923077 ,

        0.000433576573426573 , 0.000119233557692308 ,

        0.0000330185236686390 , 0.0841153846153845 ,

        0.0441605769230769 , 0.0176642307692308 , 0.00635912307692310

        , 0.00216788286713286 , 0.000715401346153844 ,

        0.000231129665680473 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0.0002187]

        [-1 , -0.3 , -0.09 , -0.027 , -0.0081 , -0.00243 , -0.000729

        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 270.230769230769 ,

        175.300000000000 , 124.833589743590 , 95.4019999999998 ,

        76.7442538461537 , 64.0582633333332 , 54.9337674615384 ,

        -269.230769230769 , -80.7692307692306 , -24.2307692307685 ,

        -7.26923076923240 , -2.18076923076824 , -0.654230769230102 ,

        -0.196269230770182 , 0]

        [-0.3 , -0.09 , -0.027 , -0.0081 , -0.00243 , -0.000729 ,

        -0.0002187 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 175.300000000000 ,

        125.533589743590 , 96.3119999999998 , 77.7172538461537 ,

        65.0501633333332 , 55.9313374615384 , 49.0732584499999 ,

        -175.000000000000 , -74.4871794871794 , -36.6378205128205 ,

        -20.8196153846154 , -13.3345512820513 , -9.31906410256409 ,

        -6.91815048076922 , 0]

        [-0.09 , -0.027 , -0.0081 , -0.00243 , -0.000729 , -0.0002187

        , -0.00006561 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 124.833589743590

        , 96.3119999999998 , 78.0415871794871 , 65.5461133333332 ,

        56.5298794615384 , 49.7394391166666 , 44.4481779911965 ,

        -124.743589743590 , -66.0064102564102 , -39.4584615384615 ,

        -26.0148717948718 , -18.4418589743589 , -13.7774201923077 ,

        -10.6967985683761 , 0]

        [-0.027 , -0.0081 , -0.00243 , -0.000729 , -0.0002187 ,

        -0.00006561 , -0.000019683 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        95.4019999999998 , 77.7172538461537 , 65.5461133333332 ,

        56.7293934615384 , 50.0725294499999 , 44.8766556911965 ,

        40.7111834104999 , -95.3749999999998 , -58.0973076923076 ,

        -38.6951923076922 , -27.5646538461538 , -20.6366899038461 ,

        -16.0363657371795 , -12.8239699628205 , 0]

        [
        [-0.0081 , -0.00243 , -0.000729 , -0.0002187 , -0.00006561 ,

                                  -5
        -0.000019683 , -0.59049 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        76.7442538461537 , 65.0501633333332 , 56.5298794615384 ,

        50.0725294499999 , 45.0194815911965 , 40.9611670079999 ,

        37.6315931090911 , -76.7361538461537 , -51.3755128205127 ,

        -36.6874487179487 , -27.4959596153846 , -21.3759329059829 ,

                                                 ]
        -17.0968601940171 , -13.9869430786713 , 0]

        [
        [-0.00243 , -0.000729 , -0.0002187 , -0.00006561 ,

                                  -5               -5
        -0.000019683 , -0.59049 10   , -0.177147 10   , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 64.0582633333332 , 55.9313374615384 ,

        49.7394391166666 , 44.8766556911965 , 40.9611670079999 ,

        37.7427020332022 , 35.0512490746866 , -64.0558333333332 ,

        -45.8102435897435 , -34.3552293269230 , -26.7155000747863 ,

        -21.3697504252136 , -17.4832814031468 , -14.5690169722698 , 0

        ]
        ]

        [
        [-0.000729 , -0.0002187 , -0.00006561 , -0.000019683 ,

                   -5               -5               -6
        -0.59049 10   , -0.177147 10   , -0.531441 10   , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 54.9337674615384 , 49.0732584499999 ,

        44.4481779911965 , 40.7111834104999 , 37.6315931090911 ,

        35.0512490746866 , 32.8585161062661 , -54.9330384615384 ,

        -41.2144990384615 , -32.0550672435897 , -25.6426406564102 ,

        -20.9796197276223 , -17.4827249798776 , -14.7929685899526 , 0

        ]
        ]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -269.230769230769 , -175.000000000000 , -124.743589743590 ,

        -95.3749999999998 , -76.7361538461537 , -64.0558333333332 ,

        -54.9330384615384 , 269.230769230769 , 80.7692307692306 ,

        24.2307692307685 , 7.26923076923240 , 2.18076923076824 ,

        0.654230769230102 , 0.196269230770182 , -0.7]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -80.7692307692306 , -74.4871794871794 , -66.0064102564102 ,

        -58.0973076923076 , -51.3755128205127 , -45.8102435897435 ,

        -41.2144990384615 , 80.7692307692306 , 68.2051282051281 ,

        49.0448717948717 , 34.3699999999999 , 24.4883333333333 ,

        17.9838974358974 , 13.6400317307692 , -0.21]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -24.2307692307685 , -36.6378205128205 , -39.4584615384615 ,

        -38.6951923076922 , -36.6874487179487 , -34.3552293269230 ,

        -32.0550672435897 , 24.2307692307685 , 49.0448717948717 ,

        45.0997435897435 , 36.4053846153846 , 28.6564743589743 ,

        22.6941323717948 , 18.2540947435897 , -0.063]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -7.26923076923240 , -20.8196153846154 , -26.0148717948718 ,

        -27.5646538461538 , -27.4959596153846 , -26.7155000747863 ,

        -25.6426406564102 , 7.26923076923240 , 34.3699999999999 ,

        36.4053846153846 , 32.2139999999999 , 27.2211826923076 ,

        22.8132023717948 , 19.2054841461538 , -0.0189]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -2.18076923076824 , -13.3345512820513 , -18.4418589743589 ,

        -20.6366899038461 , -21.3759329059829 , -21.3697504252136 ,

        -20.9796197276223 , 2.18076923076824 , 24.4883333333333 ,

        28.6564743589743 , 27.2211826923076 , 24.3329049145299 ,

        21.3388380213675 , 18.6388355420746 , -0.00567]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -0.654230769230102 , -9.31906410256409 , -13.7774201923077 ,

        -16.0363657371795 , -17.0968601940171 , -17.4832814031468 ,

        -17.4827249798776 , 0.654230769230102 , 17.9838974358974 ,

        22.6941323717948 , 22.8132023717948 , 21.3388380213675 ,

        19.4153874487956 , 17.4793864402622 , -0.001701]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -0.196269230770182 , -6.91815048076922 , -10.6967985683761 ,

        -12.8239699628205 , -13.9869430786713 , -14.5690169722698 ,

        -14.7929685899526 , 0.196269230770182 , 13.6400317307692 ,

        18.2540947435897 , 19.2054841461538 , 18.6388355420746 ,

        17.4793864402622 , 16.1366782960497 , -0.0005103]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.3 , 0.09 , 0.027 , 0.0081 ,

        0.00243 , 0.000729 , 0.0002187 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -0.7 , -0.21 , -0.063 , -0.0189 , -0.00567 , -0.001701 ,

        -0.0005103 , 0]

> print(MM);

        [
        [0.000250000000000000 , 0.0000375000000000000 ,

                            -5                       -5
        0.750000000000001 10   , 0.168750000000000 10   ,

                            -6                       -6
        0.405000000000000 10   , 0.101250000000000 10   ,

                            -7
        0.260357142857143 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

                                                         ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                                            -5
        [0.0000375000000000000 , 0.750000000000001 10   ,

                            -5                       -6
        0.168750000000000 10   , 0.405000000000000 10   ,

                            -6                       -7
        0.101250000000000 10   , 0.260357142857143 10   ,

                            -8
        0.683437500000001 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

                                                         ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                    -5                       -5
        [0.750000000000001 10   , 0.168750000000000 10   ,

                            -6                       -6
        0.405000000000000 10   , 0.101250000000000 10   ,

                            -7                       -8
        0.260357142857143 10   , 0.683437500000001 10   ,

                            -8
        0.182250000000000 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

                                                         ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                    -5                       -6
        [0.168750000000000 10   , 0.405000000000000 10   ,

                            -6                       -7
        0.101250000000000 10   , 0.260357142857143 10   ,

                            -8                       -8
        0.683437500000001 10   , 0.182250000000000 10   ,

                            -9
        0.492075000000000 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

                                                         ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                    -6                       -6
        [0.405000000000000 10   , 0.101250000000000 10   ,

                            -7                       -8
        0.260357142857143 10   , 0.683437500000001 10   ,

                            -8                       -9
        0.182250000000000 10   , 0.492075000000000 10   ,

                            -9
        0.134202272727273 10   , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

                                                         ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                    -6                       -7
        [0.101250000000000 10   , 0.260357142857143 10   ,

                            -8                       -8
        0.683437500000001 10   , 0.182250000000000 10   ,

                            -9                       -9
        0.492075000000000 10   , 0.134202272727273 10   ,

                            -10
        0.369056250000000 10    , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

                                                         ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                    -7                       -8
        [0.260357142857143 10   , 0.683437500000001 10   ,

                            -8                       -9
        0.182250000000000 10   , 0.492075000000000 10   ,

                            -9                       -10
        0.134202272727273 10   , 0.369056250000000 10    ,

                            -10
        0.102200192307692 10    , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

                                                         ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.00900000000000000 ,

        0.00202500000000000 , 0.000486000000000000 ,

        0.000121500000000000 , 0.0000312428571428571 ,

                            -5                       -5
        0.820125000000000 10   , 0.218700000000000 10   , 0 , 0 , 0 ,

                                                     ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.00202500000000000 ,

        0.000486000000000000 , 0.000121500000000000 ,

                                                    -5
        0.0000312428571428571 , 0.820125000000000 10   ,

                            -5                       -6
        0.218700000000000 10   , 0.590490000000000 10   , 0 , 0 , 0 ,

                                                     ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.000486000000000000 ,

        0.000121500000000000 , 0.0000312428571428571 ,

                            -5                       -5
        0.820125000000000 10   , 0.218700000000000 10   ,

                            -6                       -6
        0.590490000000000 10   , 0.161042727272727 10   , 0 , 0 , 0 ,

                                                     ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.000121500000000000 ,

                                                    -5
        0.0000312428571428571 , 0.820125000000000 10   ,

                            -5                       -6
        0.218700000000000 10   , 0.590490000000000 10   ,

                            -6                       -7
        0.161042727272727 10   , 0.442867500000000 10   , 0 , 0 , 0 ,

                                                     ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0000312428571428571 ,

                            -5                       -5
        0.820125000000000 10   , 0.218700000000000 10   ,

                            -6                       -6
        0.590490000000000 10   , 0.161042727272727 10   ,

                            -7                       -7
        0.442867500000000 10   , 0.122640230769231 10   , 0 , 0 , 0 ,

                                                     ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                                                -5
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.820125000000000 10   ,

                            -5                       -6
        0.218700000000000 10   , 0.590490000000000 10   ,

                            -6                       -7
        0.161042727272727 10   , 0.442867500000000 10   ,

                            -7                       -8
        0.122640230769231 10   , 0.341640642857143 10   , 0 , 0 , 0 ,

                                                     ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [                                                -5
        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.218700000000000 10   ,

                            -6                       -6
        0.590490000000000 10   , 0.161042727272727 10   ,

                            -7                       -7
        0.442867500000000 10   , 0.122640230769231 10   ,

                            -8                       -9
        0.341640642857143 10   , 0.956593800000000 10   , 0 , 0 , 0 ,

                                                     ]
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.000583333333333334 , 0.000379166666666667 ,

        0.000270277777777778 , 0.000206645833333333 ,

        0.000166261666666667 , 0.000138787638888889 ,

        0.000119021583333333 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.000379166666666667 , 0.000270277777777778 ,

        0.000206645833333333 , 0.000166261666666667 ,

        0.000138787638888889 , 0.000119021583333333 ,

        0.000104159832291667 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.000270277777777778 , 0.000206645833333333 ,

        0.000166261666666667 , 0.000138787638888889 ,

        0.000119021583333333 , 0.000104159832291667 ,

        0.0000925907700925927 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.000206645833333333 , 0.000166261666666667 ,

        0.000138787638888889 , 0.000119021583333333 ,

        0.000104159832291667 , 0.0000925907700925927 ,

        0.0000833328412583334 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.000166261666666667 , 0.000138787638888889 ,

        0.000119021583333333 , 0.000104159832291667 ,

        0.0000925907700925927 , 0.0000833328412583334 ,

        0.0000757574415553031 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.000138787638888889 , 0.000119021583333333 ,

        0.000104159832291667 , 0.0000925907700925927 ,

        0.0000833328412583334 , 0.0000757574415553031 ,

        0.0000694444075388195 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0.000119021583333333 , 0.000104159832291667 ,

        0.0000925907700925927 , 0.0000833328412583334 ,

        0.0000757574415553031 , 0.0000694444075388195 ,

        0.0000641025538825449 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.114333333333333 ,

        0.0543083333333333 , 0.0278973333333333 , 0.0154921666666667

        , 0.00924956666666667 , 0.00588516541666667 ,

        0.00395122661111112 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.0543083333333333 ,

        0.0278973333333333 , 0.0154921666666667 , 0.00924956666666667

        , 0.00588516541666667 , 0.00395122661111112 ,

        0.00277336003777780 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.0278973333333333 ,

        0.0154921666666667 , 0.00924956666666667 ,

        0.00588516541666667 , 0.00395122661111112 ,

        0.00277336003777780 , 0.00201903495747475 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.0154921666666667 ,

        0.00924956666666667 , 0.00588516541666667 ,

        0.00395122661111112 , 0.00277336003777780 ,

        0.00201903495747475 , 0.00151483882385606 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.00924956666666667 ,

        0.00588516541666667 , 0.00395122661111112 ,

        0.00277336003777780 , 0.00201903495747475 ,

        0.00151483882385606 , 0.00116541643225082 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.00588516541666667 ,

        0.00395122661111112 , 0.00277336003777780 ,

        0.00201903495747475 , 0.00151483882385606 ,

        0.00116541643225082 , 0.000915727740640641 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0.00395122661111112 ,

        0.00277336003777780 , 0.00201903495747475 ,

        0.00151483882385606 , 0.00116541643225082 ,

        0.000915727740640641 , 0.000732594344796714 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

> lambda:=array(1..2*(n+m)+L); # lambda^2 = l^2*omega^2*rho*A/EI
> lambda:=evalf(Eigenvals(KK,MM,vecs));

                     lambda := array(1 .. 29, [])


            [                                                       8
  lambda := [Float(-infinity), Float(infinity), 0.180392830666144 10 ,

                            8                      7
        0.104910881911553 10 , 0.416491447954123 10 ,

                            7                      7
        0.360141000030657 10 , 0.274679488487861 10 ,

                            7                      7
        0.236234603277161 10 , 0.195360227838052 10 ,

                            7                      7
        0.166284493802322 10 , 0.116319444651569 10 ,

        997179.993973645, 847072.978992508, 708017.324541962,

        231120.279970888, 292097.903247957, 605426.516780698,

        575022.090255413, 511078.544815809, 424105.883357900,

        477916.490508162, 461538.461547785, 103630.516585431,

        60462.7391360412, 27443.2326412493, 14142.7519682921,

                                                            ]
        5857.86187003981, 806.789269814111, 40.0907902845099]

Salida de archivo a Matlab
> res11:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/masa.csv",WRITE,TEXT);
> res22:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/rigi.csv",WRITE,TEXT);
Error, (in fopen) file or directory does not exist

Error, (in fopen) file or directory does not exist

> writedata(res22,KK,float):writedata(res11,MM,float);
> fclose(res11):fclose(res22):
> #print(MM);
> #s:=det(xx*MM-KK);
> #plot(0.0000000001*s,xx=15..70);
> #ss:=evalf(solve(s=0));
> Omega:=array(1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do;
> #Omega[i]:=evalf(lambda[i]^0.5/Pi^2):
> omega[i]:=evalf(lambda[i]^0.25);
> writestat(res,"frec=","=",omega[i]):
> #Omega[i]:=evalf(lambda[i]^0.25);
> end do;

           omega[1] := Float(infinity) + Float(undefined) I


                                  49


                     omega[2] := Float(infinity)


                                  30


                     omega[3] := 65.1710650349825


                                  31


                     omega[4] := 56.9121686051371


                                  31


                     omega[5] := 45.1753495918820


                                  31


                     omega[6] := 43.5630362512914


                                  31


                     omega[7] := 40.7105113559880


                                  31


                     omega[8] := 39.2044962795690


                                  31


                     omega[9] := 37.3860031537385


                                  31


                    omega[10] := 35.9097960188212


                                  31


                    omega[11] := 32.8407510027145


                                  31


                    omega[12] := 31.6004588816125


                                  31


                    omega[13] := 30.3375291805184


                                  31


                    omega[14] := 29.0075447666585


                                  31


                    omega[15] := 21.9260052485144


                                  31


                    omega[16] := 23.2478133358095


                                  31


                    omega[17] := 27.8942930788824


                                  31


                    omega[18] := 27.5372858166583


                                  31


                    omega[19] := 26.7375686338756


                                  31


                    omega[20] := 25.5192892398245


                                  31


                    omega[21] := 26.2928705987691


                                  31


                    omega[22] := 26.0646546206471


                                  31


                    omega[23] := 17.9420439333725


                                  31


                    omega[24] := 15.6809349970629


                                  31


                    omega[25] := 12.8708970576961


                                  31


                    omega[26] := 10.9051961413676


                                  31


                    omega[27] := 8.74852388122046


                                  31


                    omega[28] := 5.32954370969824


                                  31


                    omega[29] := 2.51629268057407


                                  31

> fclose(res);
> convert(omega,'list'):sort(%);

  [Float(infinity), 26.2928705987691, 39.2044962795690,

        25.5192892398245, 32.8407510027145, 2.51629268057407,

        31.6004588816125, Float(infinity) + Float(undefined) I,

        26.7375686338756, 35.9097960188212, 26.0646546206471,

        27.5372858166583, 17.9420439333725, 40.7105113559880,

        15.6809349970629, 12.8708970576961, 37.3860031537385,

        43.5630362512914, 56.9121686051371, 29.0075447666585,

        10.9051961413676, 23.2478133358095, 27.8942930788824,

        45.1753495918820, 65.1710650349825, 21.9260052485144,

        30.3375291805184, 8.74852388122046, 5.32954370969824]

Formas Modales
Autovalores
> for i from 1 by 1 to 2*(n+m)+L do:
> v[i]:=array(1..2*(n+m)+L,1..1):
> v[i]:= linalg[submatrix](vecs, 1..2*(n+m)+L, i..i):
> end do:
> #print(v[29]):
> #print(vecs);
> print(v[42]); 

                                v[42]

> norm(v[4]);

                           1.00000000000000

Forma modal
> for dib from 1 by 1 to 2*(n+m)+L do:
> W1[dib]:=sum(vecs[ii+m,dib]*w1[ii],ii=1..n):
> Phi1[dib]:=sum(vecs[ii,dib]*phi1[ii],ii=1..m):
> W2[dib]:=sum(vecs[ii+m+n+m,dib]*w2[ii],ii=1..n);
> Phi2[dib]:=sum(vecs[ii+m+n,dib]*phi2[ii],ii=1..m);
> end do:
> with(plots):
> dib:=33:
Warning, the name changecoords has been redefined

> P1:=plot({100000000000000000*W1[dib]},x=0..c[1]):
> P2:=plot({100000000000000000*W2[dib]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> display({P1});
> display({P1,P2});
Plotting error, empty plot
Plotting error, empty plot
Normalización
> #for i from 1 by 1 to 2*(n+m)+L do:
> #nL2W1[i]:=int((W1[i])^2,x=0..c[1]):
> #nL2W2[i]:=int((W2[i])^2,x=c[1]..1):
> #nL2Phi1[i]:=int((Phi1[i])^2,x=0..c[1]):
> #nL2Phi2[i]:=int((Phi2[i])^2,x=c[1]..1):
> #W1[i]:=W1[i]/(nL2W1[i])^0.5;
> #W2[i]:=W2[i]/(nL2W2[i])^0.5;
> #Phi1[i]:=Phi1[i]/(nL2Phi1[i])^0.5;
> #Phi2[i]:=Phi2[i]/(nL2Phi2[i])^0.5;
>  #end do:
> WW139:=plot({W1[39]},x=0..c[1]):
> WW239:=plot({W2[39]},x=c[1]..1):
> WW140:=plot({W1[40]},x=0..c[1]):
> WW240:=plot({W2[40]},x=c[1]..1):
> WW141:=plot({W1[41]},x=0..c[1]):
> WW241:=plot({W2[41]},x=c[1]..1):
> WW142:=plot({W1[42]},x=0..c[1]):
> WW242:=plot({W2[42]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> W11x:=plot({diff(W1[dib],x)},x=0..c[1]):
> W11xxx:=plot({diff(W1[dib],x$3)},x=0..c[1]):
> Phi11:=plot({Phi1[dib]},x=0..c[1]):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> 
> W22x:=plot({diff(W2[dib],x)},x=c[1]..1):
> W22xxx:=plot({diff(W2[dib],x$3)},x=c[1]..1):
> Phi22:=plot({Phi21[dib]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> 
> evalf(subs(x=0.5,W2[dib]));
> evalf(subs(x=0.5,W1[dib]));
> evalf(subs(x=0.5,Phi2[dib]));
> evalf(subs(x=0.5,Phi1[dib]));

                                W2[33]


                                W1[33]


                               Phi2[33]


                               Phi1[33]

> evalf(subs(x=0.5,Phi1[dib]));

                               Phi1[33]

> #plot({W1[dib],diff(W1[dib],x)},x=0..c[1]);
> #plot({W2[dib]},x=c[1]..1);
> #plot({Phi1[dib]},x=0..c[1]);
> #plot({Phi2[dib]},x=c[1]..1);
> display({WW142,WW242});
> display({WW141,WW241});
> display({WW139,WW239});
> #display({100000*W11xxx,100000*W22xxx});
> #display({W11,W22,W11x,W22x});
Plotting error, empty plot
Plotting error, empty plot
Plotting error, empty plot
Normalizar
> nL2:=int((W1[39])^2,x=0..0.5);

                                           2
                          nL2 := 0.5 W1[39]


          nn := 0.008343975305128818107528826388809051070708

> WN1[39]:=W1[39]/nL2^0.5;

                                                     W1[39]
       WN1[39] := 1.41421356237309504880168872421 ------------
                                                         2 0.5
                                                  (W1[39] )

> plot(WN1[39],x=0..0.5);
Plotting error, empty plot
> plot(W1[39],x=0..0.5);
Plotting error, empty plot
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
