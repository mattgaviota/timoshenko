VIGAS TIMOSHENKO - MULTIPLICADORES  DE LAGRANGE
Espesor Uniforme - Isotropía - Condiciones de bordes elásticas y rótula intermedia
06/10/06
Utilizamos la base 1,x,x^2... 
Analisis Dinámico: FUNCIONA
Corregido a media para aplicar Lagrange con rótula y restriccines elásticas intermedias
(Ver Paper "Free Vibration of Multi-span Timoshenko Beams using static Timoshenko Beams functions" Journal of sound and vibrations, D. Zhou)
Aproxima la Funcion Wtotal y Phi de flexión.


> restart; a:=30: Digits:=a: 
> with(linalg):

Warning, the protected names norm and trace have been redefined and unprotected

Archivo para escribir los resultados

> res:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/ISOTROPA/PSk 6.csv",WRITE,TEXT);
> writestat(res,'n','m','r','Frecuencia'):
Error, (in fopen) file or directory does not exist

Números de Polinomios en cada Dirección (se supone la misma cantidad en las dos direcciones)
> n:=7:  # Dirección Girof
> m:=n:  # Dirección W
> writestat(res,"n =",n,"m =",m,"Digitos=",a):

Datos
Longitud de la viga(ojo con los datos)
> nu:=0.30:
> alpha:=0.1: ks:=5/6:  Gamma:=ks/(2*(1.0+nu)): # Gamma:=1/5; #alpha=r/l: 

> l:=1.0:                r:=alpha/(12)^0.5; r*12^0.5/l:

                r := 0.0288675134594812882254574390251

Constantes de los Resortes en los bordes de la viga
> T1:=0; :T2:=0;     R1:=0.;  R2:=0;
> #T1:=1.; :T2:=10.;     R1:=100.0;  R2:=0;
> #T1:=10.0^8;T2:=10.0^3;R1:=100.0;R2:=0;

                               T1 := 0


                               T2 := 0


                               R1 := 0.


                               R2 := 0

> writestat(res,"T1",T1,"T2",T2,"R1",R1,"R2",R2):
Ubicación del Resorte Intermedio
> c[1]:=0.3: 
> Tc:=0; Rc:=0;
> R12:=0:

                               Tc := 0


                               Rc := 0

Condiciones de Borde de la Viga (  w1:Desplazamiento por flexion 1 tramo, w2:Desplazamiento por flexión 2 tramo) 
> c1:=c[1]:
Condiciones de controno:  1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF- 6 ->FS  
> 
> ccf1:=2:  #(W tramo 1)
> ccg1:=5:  #(Phi tramo 1)
> ccf2:=6: #(W tramo 2)
> ccg2:=5: #(Phi tramo 2)
Condicines impuestas por los multiplicadores de Lagrange
> L:=2: #Cantidad de condiciones


Subrutina para determinar las condiciones de contorno(xb: determina el que borde estamos: 0,1)
ccc = 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF 
> calccc := proc( cc,p,x1,x2)
> if (cc=1) then:
> p[1]:=(x-x1)*(x-x2):
> elif (cc=2) then: 
> p[1]:=(x-x1):
> elif (cc=3) then: 
> p[1]:=(x-x1)^2:
> elif (cc=4) then: 
> p[1]:=(x-x1)^2*(x-x2):
> elif(cc=5) then:
> p[1]:=1:
> elif(cc=6) then:
> p[1]:=(x2-x):
> end if:
> return p:
> end proc:
Subrutina para calcular los polinomios simples
> calcps := proc( pp1,nn,p,p0,p1,px,px0,px1,pxx,x1,x2) global i:
>   p[1]:=pp1:
>   p0[1]:=subs(x=x1,p[1]);
>   p1[1]:=subs(x=x2,p[1]);
>   for i from 2 by 1 to nn do:
>      p[i]:=expand(p[i-1]*x):
>      p0[i]:=subs(x=x1,p[i]);
            
>   p1[i]:=subs(x=x2,p[i]):
>   end do:
>   for i from 1 by 1 to n do:
>      px[i]:=diff(p[i],x): pxx[i]:=diff(p[i],x$2): 
>      px0[i]:=subs(x=x1,px[i]);px1[i]:=subs(x=x2,px[i]):
>   end do:
>   return p,p0,p1,px,px0,px1,pxx
> end proc:
ccf1: indica la condición de contorno de Wf en el primer tramo: 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF  
> 
1 Tramo: 
> 
> x1:=0: x2:=c1:
> calccc( ccf1,w1,x1,x2):
> calcps (w1[1],n,w1,w10,w11,w1x,w1x0,w1x1,w1xx,x1,x2):
> calccc( ccg1,phi1,x1,x2):
> calcps (phi1[1],m,phi1,phi10,phi11,phi1x,phi1x0,phi1x1,phi1xx,x1,x2):
> print(phi1);print(phi10);print(phi11);
> print(w1);print(w10);print(w11);

                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


       table([1 = 1, 2 = 0, 3 = 0, 5 = 0, 4 = 0, 7 = 0, 6 = 0])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])


                     2       3       5       4       7
  table([1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x ,

             6
        6 = x

        ])


       table([1 = 0, 2 = 0, 3 = 0, 5 = 0, 4 = 0, 7 = 0, 6 = 0])


  table([1 = 0.3, 2 = 0.09, 3 = 0.027, 5 = 0.00243, 4 = 0.0081,

        7 = 0.0002187,

        6 = 0.000729

        ])

ccf2: indica la condición de contorno de Wf en el segundo tramo: 1 -> SS - 2 -> SF - 3 ->CF - 4 -> CS - 5 -> FF  
> 
2 Tramo: 
> 
> x1:=c1: x2:=1:
> calccc( ccf2,w2,x1,x2):
> calcps (w2[1],n,w2,w20,w21,w2x,w2x0,w2x1,w2xx,x1,x2):
> calccc( ccg2,phi2,x1,x2):
> calcps (phi2[1],m,phi2,phi20,phi21,phi2x,phi2x0,phi2x1,phi2xx,x1,x2):
> print(phi1);print(phi2);print(phi21);
> print(w1); print(w2);
> #print(w1);print(w1x);print(w21);

                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


       table([1 = 1, 2 = 1, 3 = 1, 5 = 1, 4 = 1, 7 = 1, 6 = 1])


                     2       3       5       4       7
  table([1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x ,

             6
        6 = x

        ])


                             2       2    3       4    5       3    4
  table([1 = 1 - x, 2 = x - x , 3 = x  - x , 5 = x  - x , 4 = x  - x

               6    7
        , 7 = x  - x ,

             5    6
        6 = x  - x

        ])

Energía ( Forma Lineal) 
> print(phi1); print(phi2);

                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])


                              2       4       3       6       5
    table([1 = 1, 2 = x, 3 = x , 5 = x , 4 = x , 7 = x , 6 = x ])

Matrices de Masa de cada tramo 


> E:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do;
>    for j from 1 by 1 to n do;
>       E[i,j,1]:=int((r/l)^2*phi1[j]*phi1[i],x=0..c[1]):
>       E[i,j,2]:=int((r/l)^2*phi2[j]*phi2[i],x=c[1]..l):
>    end do;
> end do;
> F:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>       F[i,j,1]:=int(w1[j]*w1[i],x=0..c[1]):
>       F[i,j,2]:=int(w2[j]*w2[i],x=c[1]..1):
>    end do:
> end do:
> #print(F);
MM: Matriz que multiplica al autovalor: Matriz de Masa
> 
> M:=array(1..n+m,1..n+m,1..2):
> for i from 1 by 1 to n+m do:
>    for j from 1 by 1 to n+m do:
>       M[i,j,1]:=0:  M[i,j,2]:=0:  
>    end do:
> end do:
> for t from 1 by 1 to 2 do:
>    for i from 1 by 1 to n+m do:
>      if (i<=n) then:
>        for j from 1 by 1 to n+m do:                 
>           if (j<=n) then:
>              M[i,j,t]:=E[i,j,t]:
>           end if:
>        end do:  
>      else:
>        for j from 1 by 1 to n+m do:
>          if (j>n) then:
>              M[i,j,t]:=F[i-n,j-n,t]:
>          end if:
>        end do:
>      end if:
>    end do:
> end do:
> #print(E); print(M);
> 
MM
> 
> MM:=array(1..2*(n+m)+L,1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do:
>   for j from 1 by 1 to 2*(n+m)+L do:
>      MM[i,j]:=0:  
>   end do:
> end do:
> for i from 1 by 1 to 2*(n+m) do:
>   for j from 1 by 1 to 2*(n+m) do:
>      if (i<=(n+m)) then:                     
>         if (j<=(n+m)) then:
>            MM[i,j]:=M[i,j,1]:
>         end if:
>      else
>         if (j>(n+m)) then:
>            MM[i,j]:=M[i-(n+m),j-(n+m),2]:
>         end if:  
>      end if:
>   end do:
> end do:
> #print(MM);print(F);
Prueba:
> for i from 1 by 1 to n+m do;
>   for j from 1 by 1 to n+m do;
>      t:=i+j:
>      v1[t]:=is(MM[i,j]=M[i,j,1]);  
>      v2[t]:=is(MM[i+n+m,j+n+m]=M[i,j,2]);  
>   end do;
> end do;
> #print(v1);print(v2);
> print(w1);print(w1x);

                     2       3       5       4       7
  table([1 = x, 2 = x , 3 = x , 5 = x , 4 = x , 7 = x ,

             6
        6 = x

        ])


                                2         4         3         6
  table([1 = 1, 2 = 2 x, 3 = 3 x , 5 = 5 x , 4 = 4 x , 7 = 7 x ,

               5
        6 = 6 x

        ])

Matrices de rigidez de cada tramo
Denxn
> De:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do:
>    for j from 1 by 1 to n do:
>     De[i,j,1]:=int(Gamma*(l/r)^2*w1x[i]*w1x[j],x=0..c[1])+T1*w10[j]*w10[i]+Tc*w11[j]*w11[i]:               
>     De[i,j,2]:=int(Gamma*(l/r)^2*w2x[i]*w2x[j],x=c[1]..1)+T2*w21[j]*w21[i]:
>    end do:
> end do:
> print(De);

  array(1 .. 7, 1 .. 7, 1 .. 2, [

        (1, 1, 1) = 115.384615384615384615384615385

        (1, 1, 2) = 269.230769230769230769230769231

        (1, 2, 1) = 34.6153846153846153846153846154

        (1, 2, 2) = 80.7692307692307692307692307694

        (1, 3, 1) = 10.3846153846153846153846153846

        (1, 3, 2) = 24.2307692307692307692307692315

        (1, 4, 1) = 3.11538461538461538461538461538

        (1, 4, 2) = 7.26923076923076923076923076760

        (1, 5, 1) = 0.934615384615384615384615384617

        (1, 5, 2) = 2.18076923076923076923076923176

        (1, 6, 1) = 0.280384615384615384615384615386

        (1, 6, 2) = 0.654230769230769230769230769898

        (1, 7, 1) = 0.0841153846153846153846153846155

        (1, 7, 2) = 0.196269230769230769230769229818

        (2, 1, 1) = 34.6153846153846153846153846154

        (2, 1, 2) = 80.7692307692307692307692307694

        (2, 2, 1) = 13.8461538461538461538461538461

        (2, 2, 2) = 68.2051282051282051282051282052

        (2, 3, 1) = 4.67307692307692307692307692309

        (2, 3, 2) = 49.0448717948717948717948717950

        (2, 4, 1) = 1.49538461538461538461538461539

        (2, 4, 2) = 34.3700000000000000000000000001

        (2, 5, 1) = 0.467307692307692307692307692308

        (2, 5, 2) = 24.4883333333333333333333333334

        (2, 6, 1) = 0.144197802197802197802197802198

        (2, 6, 2) = 17.9838974358974358974358974359

        (2, 7, 1) = 0.0441605769230769230769230769231

        (2, 7, 2) = 13.6400317307692307692307692308

        (3, 1, 1) = 10.3846153846153846153846153846

        (3, 1, 2) = 24.2307692307692307692307692315

        (3, 2, 1) = 4.67307692307692307692307692309

        (3, 2, 2) = 49.0448717948717948717948717950

        (3, 3, 1) = 1.68230769230769230769230769231

        (3, 3, 2) = 45.0997435897435897435897435898

        (3, 4, 1) = 0.560769230769230769230769230771

        (3, 4, 2) = 36.4053846153846153846153846154

        (3, 5, 1) = 0.180247252747252747252747252748

        (3, 5, 2) = 28.6564743589743589743589743590

        (3, 6, 1) = 0.0567778846153846153846153846156

        (3, 6, 2) = 22.6941323717948717948717948718

        (3, 7, 1) = 0.0176642307692307692307692307693

        (3, 7, 2) = 18.2540947435897435897435897436

        (4, 1, 1) = 3.11538461538461538461538461538

        (4, 1, 2) = 7.26923076923076923076923076760

        (4, 2, 1) = 1.49538461538461538461538461538

        (4, 2, 2) = 34.3700000000000000000000000001

        (4, 3, 1) = 0.560769230769230769230769230769

        (4, 3, 2) = 36.4053846153846153846153846154

        (4, 4, 1) = 0.192263736263736263736263736264

        (4, 4, 2) = 32.2140000000000000000000000001

        (4, 5, 1) = 0.0630865384615384615384615384615

        (4, 5, 2) = 27.2211826923076923076923076924

        (4, 6, 1) = 0.0201876923076923076923076923077

        (4, 6, 2) = 22.8132023717948717948717948718

        (4, 7, 1) = 0.00635912307692307692307692307690

        (4, 7, 2) = 19.2054841461538461538461538462

        (5, 1, 1) = 0.934615384615384615384615384617

        (5, 1, 2) = 2.18076923076923076923076923176

        (5, 2, 1) = 0.467307692307692307692307692308

        (5, 2, 2) = 24.4883333333333333333333333334

        (5, 3, 1) = 0.180247252747252747252747252748

        (5, 3, 2) = 28.6564743589743589743589743590

        (5, 4, 1) = 0.0630865384615384615384615384616

        (5, 4, 2) = 27.2211826923076923076923076924

        (5, 5, 1) = 0.0210288461538461538461538461539

        (5, 5, 2) = 24.3329049145299145299145299146

        (5, 6, 1) = 0.00681334615384615384615384615387

        (5, 6, 2) = 21.3388380213675213675213675214

        (5, 7, 1) = 0.00216788286713286713286713286714

        (5, 7, 2) = 18.6388355420745920745920745921

        (6, 1, 1) = 0.280384615384615384615384615386

        (6, 1, 2) = 0.654230769230769230769230769898

        (6, 2, 1) = 0.144197802197802197802197802198

        (6, 2, 2) = 17.9838974358974358974358974359

        (6, 3, 1) = 0.0567778846153846153846153846156

        (6, 3, 2) = 22.6941323717948717948717948718

        (6, 4, 1) = 0.0201876923076923076923076923078

        (6, 4, 2) = 22.8132023717948717948717948718

        (6, 5, 1) = 0.00681334615384615384615384615387

        (6, 5, 2) = 21.3388380213675213675213675214

        (6, 6, 1) = 0.00222982237762237762237762237763

        (6, 6, 2) = 19.4153874487956487956487956488

        (6, 7, 1) = 0.000715401346153846153846153846156

        (6, 7, 2) = 17.4793864402622377622377622378

        (7, 1, 1) = 0.0841153846153846153846153846155

        (7, 1, 2) = 0.196269230769230769230769229818

        (7, 2, 1) = 0.0441605769230769230769230769231

        (7, 2, 2) = 13.6400317307692307692307692308

        (7, 3, 1) = 0.0176642307692307692307692307692

        (7, 3, 2) = 18.2540947435897435897435897436

        (7, 4, 1) = 0.00635912307692307692307692307690

        (7, 4, 2) = 19.2054841461538461538461538462

        (7, 5, 1) = 0.00216788286713286713286713286714

        (7, 5, 2) = 18.6388355420745920745920745921

        (7, 6, 1) = 0.000715401346153846153846153846156

        (7, 6, 2) = 17.4793864402622377622377622378

        (7, 7, 1) = 0.000231129665680473372781065088758

        (7, 7, 2) = 16.1366782960497579343733189887

        ])

Bmxm
> B:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>       B[i,j,1]:=int(Gamma*(l/r)^2*w1x[j]*phi1[i],x=0..c[1]):
>       B[i,j,2]:=int(Gamma*(l/r)^2*w2x[j]*phi2[i],x=c[1]..1):
>    end do:
> end do:
> print(B);

  array(1 .. 7, 1 .. 7, 1 .. 2, [

        (1, 1, 1) = 115.384615384615384615384615385

        (1, 1, 2) = -269.230769230769230769230769231

        (1, 2, 1) = 34.6153846153846153846153846154

        (1, 2, 2) = -80.7692307692307692307692307694

        (1, 3, 1) = 10.3846153846153846153846153846

        (1, 3, 2) = -24.2307692307692307692307692315

        (1, 4, 1) = 3.11538461538461538461538461538

        (1, 4, 2) = -7.26923076923076923076923076760

        (1, 5, 1) = 0.934615384615384615384615384617

        (1, 5, 2) = -2.18076923076923076923076923176

        (1, 6, 1) = 0.280384615384615384615384615386

        (1, 6, 2) = -0.654230769230769230769230769898

        (1, 7, 1) = 0.0841153846153846153846153846155

        (1, 7, 2) = -0.196269230769230769230769229818

        (2, 1, 1) = 17.3076923076923076923076923077

        (2, 1, 2) = -175.000000000000000000000000000

        (2, 2, 1) = 6.92307692307692307692307692309

        (2, 2, 2) = -74.4871794871794871794871794873

        (2, 3, 1) = 2.33653846153846153846153846155

        (2, 3, 2) = -36.6378205128205128205128205129

        (2, 4, 1) = 0.747692307692307692307692307692

        (2, 4, 2) = -20.8196153846153846153846153846

        (2, 5, 1) = 0.233653846153846153846153846154

        (2, 5, 2) = -13.3345512820512820512820512821

        (2, 6, 1) = 0.0720989010989010989010989010991

        (2, 6, 2) = -9.31906410256410256410256410258

        (2, 7, 1) = 0.0220802884615384615384615384616

        (2, 7, 2) = -6.91815048076923076923076923078

        (3, 1, 1) = 3.46153846153846153846153846154

        (3, 1, 2) = -124.743589743589743589743589744

        (3, 2, 1) = 1.55769230769230769230769230769

        (3, 2, 2) = -66.0064102564102564102564102565

        (3, 3, 1) = 0.560769230769230769230769230771

        (3, 3, 2) = -39.4584615384615384615384615385

        (3, 4, 1) = 0.186923076923076923076923076923

        (3, 4, 2) = -26.0148717948717948717948717949

        (3, 5, 1) = 0.0600824175824175824175824175825

        (3, 5, 2) = -18.4418589743589743589743589744

        (3, 6, 1) = 0.0189259615384615384615384615385

        (3, 6, 2) = -13.7774201923076923076923076923

        (3, 7, 1) = 0.00588807692307692307692307692308

        (3, 7, 2) = -10.6967985683760683760683760684

        (4, 1, 1) = 0.778846153846153846153846153847

        (4, 1, 2) = -95.3750000000000000000000000002

        (4, 2, 1) = 0.373846153846153846153846153847

        (4, 2, 2) = -58.0973076923076923076923076924

        (4, 3, 1) = 0.140192307692307692307692307693

        (4, 3, 2) = -38.6951923076923076923076923078

        (4, 4, 1) = 0.0480659340659340659340659340659

        (4, 4, 2) = -27.5646538461538461538461538462

        (4, 5, 1) = 0.0157716346153846153846153846154

        (4, 5, 2) = -20.6366899038461538461538461539

        (4, 6, 1) = 0.00504692307692307692307692307694

        (4, 6, 2) = -16.0363657371794871794871794872

        (4, 7, 1) = 0.00158978076923076923076923076923

        (4, 7, 2) = -12.8239699628205128205128205128

        (5, 1, 1) = 0.186923076923076923076923076923

        (5, 1, 2) = -76.7361538461538461538461538463

        (5, 2, 1) = 0.0934615384615384615384615384617

        (5, 2, 2) = -51.3755128205128205128205128206

        (5, 3, 1) = 0.0360494505494505494505494505496

        (5, 3, 2) = -36.6874487179487179487179487180

        (5, 4, 1) = 0.0126173076923076923076923076923

        (5, 4, 2) = -27.4959596153846153846153846154

        (5, 5, 1) = 0.00420576923076923076923076923078

        (5, 5, 2) = -21.3759329059829059829059829060

        (5, 6, 1) = 0.00136266923076923076923076923077

        (5, 6, 2) = -17.0968601940170940170940170940

        (5, 7, 1) = 0.000433576573426573426573426573427

        (5, 7, 2) = -13.9869430786713286713286713287

        (6, 1, 1) = 0.0467307692307692307692307692308

        (6, 1, 2) = -64.0558333333333333333333333334

        (6, 2, 1) = 0.0240329670329670329670329670330

        (6, 2, 2) = -45.8102435897435897435897435898

        (6, 3, 1) = 0.00946298076923076923076923076926

        (6, 3, 2) = -34.3552293269230769230769230770

        (6, 4, 1) = 0.00336461538461538461538461538461

        (6, 4, 2) = -26.7155000747863247863247863248

        (6, 5, 1) = 0.00113555769230769230769230769231

        (6, 5, 2) = -21.3697504252136752136752136752

        (6, 6, 1) = 0.000371637062937062937062937062938

        (6, 6, 2) = -17.4832814031468531468531468532

        (6, 7, 1) = 0.000119233557692307692307692307692

        (6, 7, 2) = -14.5690169722698135198135198135

        (7, 1, 1) = 0.0120164835164835164835164835165

        (7, 1, 2) = -54.9330384615384615384615384616

        (7, 2, 1) = 0.00630865384615384615384615384616

        (7, 2, 2) = -41.2144990384615384615384615385

        (7, 3, 1) = 0.00252346153846153846153846153847

        (7, 3, 2) = -32.0550672435897435897435897436

        (7, 4, 1) = 0.000908446153846153846153846153845

        (7, 4, 2) = -25.6426406564102564102564102565

        (7, 5, 1) = 0.000309697552447552447552447552448

        (7, 5, 2) = -20.9796197276223776223776223777

        (7, 6, 1) = 0.000102200192307692307692307692308

        (7, 6, 2) = -17.4827249798776223776223776224

        (7, 7, 1) = 0.0000330185236686390532544378698225

        (7, 7, 2) = -14.7929685899526627218934911243

        ])

Cnxn
> C:=array(1..n,1..n,1..2):
> for i from 1 by 1 to n do:
>    for j from 1 by 1 to n do:
>       C[i,j,1]:=int(Gamma*(l/r)^2*w1x[i]*phi1[j],x=0..c[1]):
>       C[i,j,2]:=int(Gamma*(l/r)^2*w2x[i]*phi2[j],x=c[1]..1):
>    end do:
> end do:
Amxm
> A:=array(1..m,1..m,1..2):
> for i from 1 by 1 to m do:
>    for j from 1 by 1 to m do:
>        A[i,j,1]:=int(Gamma*(l/r)^2*phi1[j]*phi1[i]+phi1x[j]*phi1x[i],x=0..c[1]):
>        A[i,j,1]:=A[i,j,1]+R1*phi10[j]*phi10[i]+Rc*phi11[j]*phi11[i]+R12*phi11[j]*phi11[i]:          
>        A[i,j,2]:=int(Gamma*(l/r)^2*phi2[j]*phi2[i]+phi2x[j]*phi2x[i],x=c[1]..1):
>        A[i,j,2]:=A[i,j,2]+R2*phi21[j]*phi21[i]+R12*phi20[j]*phi20[i]:
>    end do:
> end do:
> Gamma*(l/r)^2; Gamma;


                   384.615384615384615384615384616


                   0.320512820512820512820512820513

> print(A);

  array(1 .. 7, 1 .. 7, 1 .. 2, [

        (1, 1, 1) = 115.384615384615384615384615385

        (1, 1, 2) = 269.230769230769230769230769231

        (1, 2, 1) = 17.3076923076923076923076923077

        (1, 2, 2) = 175.000000000000000000000000000

        (1, 3, 1) = 3.46153846153846153846153846154

        (1, 3, 2) = 124.743589743589743589743589744

        (1, 4, 1) = 0.778846153846153846153846153847

        (1, 4, 2) = 95.3750000000000000000000000002

        (1, 5, 1) = 0.186923076923076923076923076923

        (1, 5, 2) = 76.7361538461538461538461538463

        (1, 6, 1) = 0.0467307692307692307692307692308

        (1, 6, 2) = 64.0558333333333333333333333334

        (1, 7, 1) = 0.0120164835164835164835164835165

        (1, 7, 2) = 54.9330384615384615384615384616

        (2, 1, 1) = 17.3076923076923076923076923077

        (2, 1, 2) = 175.000000000000000000000000000

        (2, 2, 1) = 3.76153846153846153846153846154

        (2, 2, 2) = 125.443589743589743589743589744

        (2, 3, 1) = 0.868846153846153846153846153847

        (2, 3, 2) = 96.2850000000000000000000000002

        (2, 4, 1) = 0.213923076923076923076923076923

        (2, 4, 2) = 77.7091538461538461538461538463

        (2, 5, 1) = 0.0548307692307692307692307692308

        (2, 5, 2) = 65.0477333333333333333333333334

        (2, 6, 1) = 0.0144464835164835164835164835165

        (2, 6, 2) = 55.9306084615384615384615384616

        (2, 7, 1) = 0.00388332692307692307692307692308

        (2, 7, 2) = 49.0730397500000000000000000001

        (3, 1, 1) = 3.46153846153846153846153846154

        (3, 1, 2) = 124.743589743589743589743589744

        (3, 2, 1) = 0.868846153846153846153846153847

        (3, 2, 2) = 96.2850000000000000000000000002

        (3, 3, 1) = 0.222923076923076923076923076923

        (3, 3, 2) = 78.0334871794871794871794871796

        (3, 4, 1) = 0.0588807692307692307692307692308

        (3, 4, 2) = 65.5436833333333333333333333334

        (3, 5, 1) = 0.0159044835164835164835164835165

        (3, 5, 2) = 56.5291504615384615384615384616

        (3, 6, 1) = 0.00436932692307692307692307692308

        (3, 6, 2) = 49.7392204166666666666666666667

        (3, 7, 1) = 0.00121606813186813186813186813187

        (3, 7, 2) = 44.4481123811965811965811965813

        (4, 1, 1) = 0.778846153846153846153846153847

        (4, 1, 2) = 95.3750000000000000000000000002

        (4, 2, 1) = 0.213923076923076923076923076923

        (4, 2, 2) = 77.7091538461538461538461538463

        (4, 3, 1) = 0.0588807692307692307692307692308

        (4, 3, 2) = 65.5436833333333333333333333334

        (4, 4, 1) = 0.0163904835164835164835164835165

        (4, 4, 2) = 56.7286644615384615384615384616

        (4, 5, 1) = 0.00461232692307692307692307692308

        (4, 5, 2) = 50.0723107500000000000000000001

        (4, 6, 1) = 0.00130979670329670329670329670330

        (4, 6, 2) = 44.8765900811965811965811965813

        (4, 7, 1) = 0.000374734038461538461538461538462

        (4, 7, 2) = 40.7111637275000000000000000001

        (5, 1, 1) = 0.186923076923076923076923076923

        (5, 1, 2) = 76.7361538461538461538461538463

        (5, 2, 1) = 0.0548307692307692307692307692308

        (5, 2, 2) = 65.0477333333333333333333333334

        (5, 3, 1) = 0.0159044835164835164835164835165

        (5, 3, 2) = 56.5291504615384615384615384616

        (5, 4, 1) = 0.00461232692307692307692307692308

        (5, 4, 2) = 50.0723107500000000000000000001

        (5, 5, 1) = 0.00134103956043956043956043956044

        (5, 5, 2) = 45.0194159811965811965811965813

        (5, 6, 1) = 0.000391136538461538461538461538462

        (5, 6, 2) = 40.9611473250000000000000000001

        (5, 7, 1) = 0.000114427510489510489510489510490

        (5, 7, 2) = 37.6315872041911421911421911422

        (6, 1, 1) = 0.0467307692307692307692307692308

        (6, 1, 2) = 64.0558333333333333333333333334

        (6, 2, 1) = 0.0144464835164835164835164835165

        (6, 2, 2) = 55.9306084615384615384615384616

        (6, 3, 1) = 0.00436932692307692307692307692308

        (6, 3, 2) = 49.7392204166666666666666666667

        (6, 4, 1) = 0.00130979670329670329670329670330

        (6, 4, 2) = 44.8765900811965811965811965813

        (6, 5, 1) = 0.000391136538461538461538461538462

        (6, 5, 2) = 40.9611473250000000000000000001

        (6, 6, 1) = 0.000116614510489510489510489510490

        (6, 6, 2) = 37.7426961283022533022533022534

        (6, 7, 1) = 0.0000347480653846153846153846153846

        (6, 7, 2) = 35.0512473032166666666666666667

        (7, 1, 1) = 0.0120164835164835164835164835165

        (7, 1, 2) = 54.9330384615384615384615384616

        (7, 2, 1) = 0.00388332692307692307692307692308

        (7, 2, 2) = 49.0730397500000000000000000001

        (7, 3, 1) = 0.00121606813186813186813186813187

        (7, 3, 2) = 44.4481123811965811965811965813

        (7, 4, 1) = 0.000374734038461538461538461538462

        (7, 4, 2) = 40.7111637275000000000000000001

        (7, 5, 1) = 0.000114427510489510489510489510490

        (7, 5, 2) = 37.6315872041911421911421911422

        (7, 6, 1) = 0.0000347480653846153846153846153846

        (7, 6, 2) = 35.0512473032166666666666666667

        (7, 7, 1) = 0.0000105144701344809037116729424422

        (7, 7, 2) = 32.8585155748251855836471221087

        ])

KK: Matriz de Rigidez total
> K:=array(1..(n+m),1..(n+m),1..2):
> for t from 1 by 1 to 2 do:
>    for i from 1 by 1 to n+m do:
>       if (i<=n) then:
>          for j from 1 by 1 to n+m do:  
>             if (j<=n) then:
>                 K[i,j,t]:=A[i,j,t]:
>             else:
>                 K[i,j,t]:=B[i,j-n,t]:
>             end if:
>          end do:
>       else:
>          for j from 1 by 1 to n+m do:
>            if (j<=n) then:
>                K[i,j,t]:=C[i-n,j,t]:
>            else:
>                K[i,j,t]:=De[i-n,j-n,t]:
>            end if:
>          end do:
>       end if:
>    end do:
> end do:
> #print(K);
Prueba:
> t:=0:
> for i from 1 by 1 to n do;
>   for j from 1 by 1 to n do;     
>      t:=t+1:
>      v11[t]:=is(K[i,j,1]=A[i,j,1]);  
>      v22[t]:=is(K[i,j+n,1]=B[i,j,1]);  
>      v33[t]:=is(K[i+n,j,2]=C[i,j,2]);  
>      v44[t]:=is(K[i+n,j+n,2]=De[i,j,2]);  
>   end do;
> end do;
> #print(v11);print(v22);print(v33);print(v44);
KK
> 
> KK:=array(1..2*(n+m)+L,1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do:
>   for j from 1 by 1 to 2*(n+m)+L do:
>      KK[i,j]:=0:  
>   end do:
> end do:
> for i from 1 by 1 to 2*(n+m) do:
>    if (i<=(n+m)) then:
>        for j from 1 by 1 to 2*(n+m) do:                 
>           if (j<=(n+m)) then:
>              KK[i,j]:=K[i,j,1]:
>           end if:
>        end do:  
>    else:
>        for j from 1 by 1 to 2*(n+m) do:
>           if (j>(n+m)) then:
>              KK[i,j]:=K[i-(n+m),j-(n+m),2]:
>           end if:
>        end do:
>    end if:
> end do:
> print(KK);

        [115.384615384615384615384615385 ,

        17.3076923076923076923076923077 ,

        3.46153846153846153846153846154 ,

        0.778846153846153846153846153847 ,

        0.186923076923076923076923076923 ,

        0.0467307692307692307692307692308 ,

        0.0120164835164835164835164835165 ,

        115.384615384615384615384615385 ,

        34.6153846153846153846153846154 ,

        10.3846153846153846153846153846 ,

        3.11538461538461538461538461538 ,

        0.934615384615384615384615384617 ,

        0.280384615384615384615384615386 ,

        0.0841153846153846153846153846155 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [17.3076923076923076923076923077 ,

        3.76153846153846153846153846154 ,

        0.868846153846153846153846153847 ,

        0.213923076923076923076923076923 ,

        0.0548307692307692307692307692308 ,

        0.0144464835164835164835164835165 ,

        0.00388332692307692307692307692308 ,

        17.3076923076923076923076923077 ,

        6.92307692307692307692307692309 ,

        2.33653846153846153846153846155 ,

        0.747692307692307692307692307692 ,

        0.233653846153846153846153846154 ,

        0.0720989010989010989010989010991 ,

        0.0220802884615384615384615384616 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [3.46153846153846153846153846154 ,

        0.868846153846153846153846153847 ,

        0.222923076923076923076923076923 ,

        0.0588807692307692307692307692308 ,

        0.0159044835164835164835164835165 ,

        0.00436932692307692307692307692308 ,

        0.00121606813186813186813186813187 ,

        3.46153846153846153846153846154 ,

        1.55769230769230769230769230769 ,

        0.560769230769230769230769230771 ,

        0.186923076923076923076923076923 ,

        0.0600824175824175824175824175825 ,

        0.0189259615384615384615384615385 ,

        0.00588807692307692307692307692308 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0.778846153846153846153846153847 ,

        0.213923076923076923076923076923 ,

        0.0588807692307692307692307692308 ,

        0.0163904835164835164835164835165 ,

        0.00461232692307692307692307692308 ,

        0.00130979670329670329670329670330 ,

        0.000374734038461538461538461538462 ,

        0.778846153846153846153846153847 ,

        0.373846153846153846153846153847 ,

        0.140192307692307692307692307693 ,

        0.0480659340659340659340659340659 ,

        0.0157716346153846153846153846154 ,

        0.00504692307692307692307692307694 ,

        0.00158978076923076923076923076923 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0.186923076923076923076923076923 ,

        0.0548307692307692307692307692308 ,

        0.0159044835164835164835164835165 ,

        0.00461232692307692307692307692308 ,

        0.00134103956043956043956043956044 ,

        0.000391136538461538461538461538462 ,

        0.000114427510489510489510489510490 ,

        0.186923076923076923076923076923 ,

        0.0934615384615384615384615384617 ,

        0.0360494505494505494505494505496 ,

        0.0126173076923076923076923076923 ,

        0.00420576923076923076923076923078 ,

        0.00136266923076923076923076923077 ,

        0.000433576573426573426573426573427 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0.0467307692307692307692307692308 ,

        0.0144464835164835164835164835165 ,

        0.00436932692307692307692307692308 ,

        0.00130979670329670329670329670330 ,

        0.000391136538461538461538461538462 ,

        0.000116614510489510489510489510490 ,

        0.0000347480653846153846153846153846 ,

        0.0467307692307692307692307692308 ,

        0.0240329670329670329670329670330 ,

        0.00946298076923076923076923076926 ,

        0.00336461538461538461538461538461 ,

        0.00113555769230769230769230769231 ,

        0.000371637062937062937062937062938 ,

        0.000119233557692307692307692307692 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0.0120164835164835164835164835165 ,

        0.00388332692307692307692307692308 ,

        0.00121606813186813186813186813187 ,

        0.000374734038461538461538461538462 ,

        0.000114427510489510489510489510490 ,

        0.0000347480653846153846153846153846 ,

        0.0000105144701344809037116729424422 ,

        0.0120164835164835164835164835165 ,

        0.00630865384615384615384615384616 ,

        0.00252346153846153846153846153847 ,

        0.000908446153846153846153846153845 ,

        0.000309697552447552447552447552448 ,

        0.000102200192307692307692307692308 ,

        0.0000330185236686390532544378698225 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [115.384615384615384615384615385 ,

        17.3076923076923076923076923077 ,

        3.46153846153846153846153846154 ,

        0.778846153846153846153846153847 ,

        0.186923076923076923076923076923 ,

        0.0467307692307692307692307692308 ,

        0.0120164835164835164835164835165 ,

        115.384615384615384615384615385 ,

        34.6153846153846153846153846154 ,

        10.3846153846153846153846153846 ,

        3.11538461538461538461538461538 ,

        0.934615384615384615384615384617 ,

        0.280384615384615384615384615386 ,

        0.0841153846153846153846153846155 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [34.6153846153846153846153846154 ,

        6.92307692307692307692307692309 ,

        1.55769230769230769230769230769 ,

        0.373846153846153846153846153847 ,

        0.0934615384615384615384615384617 ,

        0.0240329670329670329670329670330 ,

        0.00630865384615384615384615384616 ,

        34.6153846153846153846153846154 ,

        13.8461538461538461538461538461 ,

        4.67307692307692307692307692309 ,

        1.49538461538461538461538461539 ,

        0.467307692307692307692307692308 ,

        0.144197802197802197802197802198 ,

        0.0441605769230769230769230769231 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [10.3846153846153846153846153846 ,

        2.33653846153846153846153846155 ,

        0.560769230769230769230769230771 ,

        0.140192307692307692307692307693 ,

        0.0360494505494505494505494505496 ,

        0.00946298076923076923076923076926 ,

        0.00252346153846153846153846153847 ,

        10.3846153846153846153846153846 ,

        4.67307692307692307692307692309 ,

        1.68230769230769230769230769231 ,

        0.560769230769230769230769230771 ,

        0.180247252747252747252747252748 ,

        0.0567778846153846153846153846156 ,

        0.0176642307692307692307692307693 , 0 , 0 , 0 , 0 , 0 , 0 , 0

        , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [3.11538461538461538461538461538 ,

        0.747692307692307692307692307692 ,

        0.186923076923076923076923076923 ,

        0.0480659340659340659340659340659 ,

        0.0126173076923076923076923076923 ,

        0.00336461538461538461538461538461 ,

        0.000908446153846153846153846153845 ,

        3.11538461538461538461538461538 ,

        1.49538461538461538461538461538 ,

        0.560769230769230769230769230769 ,

        0.192263736263736263736263736264 ,

        0.0630865384615384615384615384615 ,

        0.0201876923076923076923076923077 ,

        0.00635912307692307692307692307690 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0.934615384615384615384615384617 ,

        0.233653846153846153846153846154 ,

        0.0600824175824175824175824175825 ,

        0.0157716346153846153846153846154 ,

        0.00420576923076923076923076923078 ,

        0.00113555769230769230769230769231 ,

        0.000309697552447552447552447552448 ,

        0.934615384615384615384615384617 ,

        0.467307692307692307692307692308 ,

        0.180247252747252747252747252748 ,

        0.0630865384615384615384615384616 ,

        0.0210288461538461538461538461539 ,

        0.00681334615384615384615384615387 ,

        0.00216788286713286713286713286714 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0.280384615384615384615384615386 ,

        0.0720989010989010989010989010991 ,

        0.0189259615384615384615384615385 ,

        0.00504692307692307692307692307694 ,

        0.00136266923076923076923076923077 ,

        0.000371637062937062937062937062938 ,

        0.000102200192307692307692307692308 ,

        0.280384615384615384615384615386 ,

        0.144197802197802197802197802198 ,

        0.0567778846153846153846153846156 ,

        0.0201876923076923076923076923078 ,

        0.00681334615384615384615384615387 ,

        0.00222982237762237762237762237763 ,

        0.000715401346153846153846153846156 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0.0841153846153846153846153846155 ,

        0.0220802884615384615384615384616 ,

        0.00588807692307692307692307692308 ,

        0.00158978076923076923076923076923 ,

        0.000433576573426573426573426573427 ,

        0.000119233557692307692307692307692 ,

        0.0000330185236686390532544378698225 ,

        0.0841153846153846153846153846155 ,

        0.0441605769230769230769230769231 ,

        0.0176642307692307692307692307692 ,

        0.00635912307692307692307692307690 ,

        0.00216788286713286713286713286714 ,

        0.000715401346153846153846153846156 ,

        0.000231129665680473372781065088758 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        269.230769230769230769230769231 ,

        175.000000000000000000000000000 ,

        124.743589743589743589743589744 ,

        95.3750000000000000000000000002 ,

        76.7361538461538461538461538463 ,

        64.0558333333333333333333333334 ,

        54.9330384615384615384615384616 ,

        -269.230769230769230769230769231 ,

        -80.7692307692307692307692307694 ,

        -24.2307692307692307692307692315 ,

        -7.26923076923076923076923076760 ,

        -2.18076923076923076923076923176 ,

        -0.654230769230769230769230769898 ,

        -0.196269230769230769230769229818 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        175.000000000000000000000000000 ,

        125.443589743589743589743589744 ,

        96.2850000000000000000000000002 ,

        77.7091538461538461538461538463 ,

        65.0477333333333333333333333334 ,

        55.9306084615384615384615384616 ,

        49.0730397500000000000000000001 ,

        -175.000000000000000000000000000 ,

        -74.4871794871794871794871794873 ,

        -36.6378205128205128205128205129 ,

        -20.8196153846153846153846153846 ,

        -13.3345512820512820512820512821 ,

        -9.31906410256410256410256410258 ,

        -6.91815048076923076923076923078 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        124.743589743589743589743589744 ,

        96.2850000000000000000000000002 ,

        78.0334871794871794871794871796 ,

        65.5436833333333333333333333334 ,

        56.5291504615384615384615384616 ,

        49.7392204166666666666666666667 ,

        44.4481123811965811965811965813 ,

        -124.743589743589743589743589744 ,

        -66.0064102564102564102564102565 ,

        -39.4584615384615384615384615385 ,

        -26.0148717948717948717948717949 ,

        -18.4418589743589743589743589744 ,

        -13.7774201923076923076923076923 ,

        -10.6967985683760683760683760684 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        95.3750000000000000000000000002 ,

        77.7091538461538461538461538463 ,

        65.5436833333333333333333333334 ,

        56.7286644615384615384615384616 ,

        50.0723107500000000000000000001 ,

        44.8765900811965811965811965813 ,

        40.7111637275000000000000000001 ,

        -95.3750000000000000000000000002 ,

        -58.0973076923076923076923076924 ,

        -38.6951923076923076923076923078 ,

        -27.5646538461538461538461538462 ,

        -20.6366899038461538461538461539 ,

        -16.0363657371794871794871794872 ,

        -12.8239699628205128205128205128 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        76.7361538461538461538461538463 ,

        65.0477333333333333333333333334 ,

        56.5291504615384615384615384616 ,

        50.0723107500000000000000000001 ,

        45.0194159811965811965811965813 ,

        40.9611473250000000000000000001 ,

        37.6315872041911421911421911422 ,

        -76.7361538461538461538461538463 ,

        -51.3755128205128205128205128206 ,

        -36.6874487179487179487179487180 ,

        -27.4959596153846153846153846154 ,

        -21.3759329059829059829059829060 ,

        -17.0968601940170940170940170940 ,

        -13.9869430786713286713286713287 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        64.0558333333333333333333333334 ,

        55.9306084615384615384615384616 ,

        49.7392204166666666666666666667 ,

        44.8765900811965811965811965813 ,

        40.9611473250000000000000000001 ,

        37.7426961283022533022533022534 ,

        35.0512473032166666666666666667 ,

        -64.0558333333333333333333333334 ,

        -45.8102435897435897435897435898 ,

        -34.3552293269230769230769230770 ,

        -26.7155000747863247863247863248 ,

        -21.3697504252136752136752136752 ,

        -17.4832814031468531468531468532 ,

        -14.5690169722698135198135198135 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        54.9330384615384615384615384616 ,

        49.0730397500000000000000000001 ,

        44.4481123811965811965811965813 ,

        40.7111637275000000000000000001 ,

        37.6315872041911421911421911422 ,

        35.0512473032166666666666666667 ,

        32.8585155748251855836471221087 ,

        -54.9330384615384615384615384616 ,

        -41.2144990384615384615384615385 ,

        -32.0550672435897435897435897436 ,

        -25.6426406564102564102564102565 ,

        -20.9796197276223776223776223777 ,

        -17.4827249798776223776223776224 ,

        -14.7929685899526627218934911243 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -269.230769230769230769230769231 ,

        -175.000000000000000000000000000 ,

        -124.743589743589743589743589744 ,

        -95.3750000000000000000000000002 ,

        -76.7361538461538461538461538463 ,

        -64.0558333333333333333333333334 ,

        -54.9330384615384615384615384616 ,

        269.230769230769230769230769231 ,

        80.7692307692307692307692307694 ,

        24.2307692307692307692307692315 ,

        7.26923076923076923076923076760 ,

        2.18076923076923076923076923176 ,

        0.654230769230769230769230769898 ,

        0.196269230769230769230769229818 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -80.7692307692307692307692307694 ,

        -74.4871794871794871794871794873 ,

        -66.0064102564102564102564102565 ,

        -58.0973076923076923076923076924 ,

        -51.3755128205128205128205128206 ,

        -45.8102435897435897435897435898 ,

        -41.2144990384615384615384615385 ,

        80.7692307692307692307692307694 ,

        68.2051282051282051282051282052 ,

        49.0448717948717948717948717950 ,

        34.3700000000000000000000000001 ,

        24.4883333333333333333333333334 ,

        17.9838974358974358974358974359 ,

        13.6400317307692307692307692308 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -24.2307692307692307692307692315 ,

        -36.6378205128205128205128205129 ,

        -39.4584615384615384615384615385 ,

        -38.6951923076923076923076923078 ,

        -36.6874487179487179487179487180 ,

        -34.3552293269230769230769230770 ,

        -32.0550672435897435897435897436 ,

        24.2307692307692307692307692315 ,

        49.0448717948717948717948717950 ,

        45.0997435897435897435897435898 ,

        36.4053846153846153846153846154 ,

        28.6564743589743589743589743590 ,

        22.6941323717948717948717948718 ,

        18.2540947435897435897435897436 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -7.26923076923076923076923076760 ,

        -20.8196153846153846153846153846 ,

        -26.0148717948717948717948717949 ,

        -27.5646538461538461538461538462 ,

        -27.4959596153846153846153846154 ,

        -26.7155000747863247863247863248 ,

        -25.6426406564102564102564102565 ,

        7.26923076923076923076923076760 ,

        34.3700000000000000000000000001 ,

        36.4053846153846153846153846154 ,

        32.2140000000000000000000000001 ,

        27.2211826923076923076923076924 ,

        22.8132023717948717948717948718 ,

        19.2054841461538461538461538462 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -2.18076923076923076923076923176 ,

        -13.3345512820512820512820512821 ,

        -18.4418589743589743589743589744 ,

        -20.6366899038461538461538461539 ,

        -21.3759329059829059829059829060 ,

        -21.3697504252136752136752136752 ,

        -20.9796197276223776223776223777 ,

        2.18076923076923076923076923176 ,

        24.4883333333333333333333333334 ,

        28.6564743589743589743589743590 ,

        27.2211826923076923076923076924 ,

        24.3329049145299145299145299146 ,

        21.3388380213675213675213675214 ,

        18.6388355420745920745920745921 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -0.654230769230769230769230769898 ,

        -9.31906410256410256410256410258 ,

        -13.7774201923076923076923076923 ,

        -16.0363657371794871794871794872 ,

        -17.0968601940170940170940170940 ,

        -17.4832814031468531468531468532 ,

        -17.4827249798776223776223776224 ,

        0.654230769230769230769230769898 ,

        17.9838974358974358974358974359 ,

        22.6941323717948717948717948718 ,

        22.8132023717948717948717948718 ,

        21.3388380213675213675213675214 ,

        19.4153874487956487956487956488 ,

        17.4793864402622377622377622378 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        -0.196269230769230769230769229818 ,

        -6.91815048076923076923076923078 ,

        -10.6967985683760683760683760684 ,

        -12.8239699628205128205128205128 ,

        -13.9869430786713286713286713287 ,

        -14.5690169722698135198135198135 ,

        -14.7929685899526627218934911243 ,

        0.196269230769230769230769229818 ,

        13.6400317307692307692307692308 ,

        18.2540947435897435897435897436 ,

        19.2054841461538461538461538462 ,

        18.6388355420745920745920745921 ,

        17.4793864402622377622377622378 ,

        16.1366782960497579343733189887 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

        [0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,

        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0]

> print(w11);print(w20);

  table([1 = 0.3, 2 = 0.09, 3 = 0.027, 5 = 0.00243, 4 = 0.0081,

        7 = 0.0002187,

        6 = 0.000729

        ])


  table([1 = 0.7, 2 = 0.21, 3 = 0.063, 5 = 0.00567, 4 = 0.0189,

        7 = 0.0005103,

        6 = 0.001701

        ])

> #print(KK);
Condiciones impuesta por los multiplicadores 1 fila por cada condición extra
> for i from 1 by 1 to n do:
Esta condición vale para cuando existe rótula 
> 
>       KK[2*(n+m)+2,i+m]:=w11[i]:
>       KK[2*(n+m)+2,i+2*m+n]:=-w20[i]:
>       KK[i+m,2*(n+m)+2]:=w11[i]:
>       KK[i+2*m+n,2*(n+m)+2]:=-w20[i]:
 
>      Esta condicion vale para reproducir dos span.
> 
>       KK[2*(n+m)+1,i]:=phi11[i]:
>       KK[2*(n+m)+1,i+m+n]:=-phi20[i]:
>       KK[i,2*(n+m)+1]:=phi11[i]:
>       KK[i+m+n,2*(n+m)+1]:=-phi20[i]:
> end do:
> print(w11);print(w20);
> print(phi11);print(phi20);

  table([1 = 0.3, 2 = 0.09, 3 = 0.027, 5 = 0.00243, 4 = 0.0081,

        7 = 0.0002187,

        6 = 0.000729

        ])


  table([1 = 0.7, 2 = 0.21, 3 = 0.063, 5 = 0.00567, 4 = 0.0189,

        7 = 0.0005103,

        6 = 0.001701

        ])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])


  table([1 = 1, 2 = 0.3, 3 = 0.09, 5 = 0.0081, 4 = 0.027,

        7 = 0.000729,

        6 = 0.00243

        ])

> for i from 1 by 1 to 2*(n+m)+L do:
> for j from 1 by 1 to 2*(n+m)+L do:
> if(is(KK[i,j]=KK[j,i])=true) then
> else
> #print(KK[i,j],i,j);
> end if:
> end do:
> end do:
Calculo de Autovalores y Autovectores
> #print(phi2);
> #print(KK);
> lambda:=array(1..2*(n+m)+L); # lambda^2 = l^2*omega^2*rho*A/EI
> lambda:=evalf(Eigenvals(KK,MM,vecs));

                     lambda := array(1 .. 30, [])


            [
  lambda := [Float(infinity), Float(infinity), Float(-infinity),

                                                            8
        Float(infinity), 0.145302509125815708922444913152 10 ,

                                           7
        0.700793354369610195837778034552 10 ,

                                           7
        0.389872138058483319093617941338 10 ,

                                           7
        0.315454640371549781645966852716 10 ,

                                           7
        0.265677000621227203116996572279 10 ,

                                           7
        0.196955080008045473788525897763 10 ,

                                           7
        0.176961771691852183306162880347 10 ,

                                           7
        0.133043388979955004129768250654 10 ,

        998387.404497795351817903551330,

        894715.219377229959700845045168,

        829761.843710679527656303163400,

        697053.015697964691744303169787,

        596193.231298688827505351934253,

        522720.783412925618645205128335,

        486806.023835628118819540938795,

        477083.753420816917441260296438,

        461538.461538461538461538459826,

        319207.563709944784567331467610,

        236577.418250373929793143516256,

        127056.707760881900323811893163,

        64138.5953841160251786761728287,

        35506.0139986594752007810954493,

        16700.9632586911520013425774883,

        6108.49407502702370906498259574,

        94.2351144752894205757803451490,

                                       ]
        1376.13263363764590165439398231]

Salida de archivo a Matlab
> res11:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/masa.csv",WRITE,TEXT);
> res22:= fopen("d:/VIRGINIA/VIGAS TIMOSHENKO/rigi.csv",WRITE,TEXT);
Error, (in fopen) file or directory does not exist

Error, (in fopen) file or directory does not exist

> writedata(res22,KK,float):writedata(res11,MM,float);
> fclose(res11):fclose(res22):
> #print(MM);
> #s:=det(xx*MM-KK);
> #plot(0.0000000001*s,xx=15..70);
> #ss:=evalf(solve(s=0));
> Omega:=array(1..2*(n+m)+L):
> for i from 1 by 1 to 2*(n+m)+L do;
> #Omega[i]:=evalf(lambda[i]^0.5/Pi^2):
> omega[i]:=evalf(lambda[i]^0.25);
> #writestat(res,"frec=","=",omega[i]):
> #Omega[i]:=evalf(lambda[i]^0.25);
> end do;

                     omega[1] := Float(infinity)


                     omega[2] := Float(infinity)


           omega[3] := Float(infinity) + Float(undefined) I


                     omega[4] := Float(infinity)


             omega[5] := 61.7402350398297268094311519278


             omega[6] := 51.4514352115045524295012207260


             omega[7] := 44.4355489695009274746029706414


             omega[8] := 42.1438521882374464263300900807


             omega[9] := 40.3727646330695932788359221380


             omega[10] := 37.4620722170192946267954900153


             omega[11] := 36.4728637623482126131984348367


             omega[12] := 33.9623962525125725167895310707


             omega[13] := 31.6100201981667190498436654112


             omega[14] := 30.7553877102945365306098484400


             omega[15] := 30.1813293824642852685402268842


             omega[16] := 28.8945844240131410523434192260


             omega[17] := 27.7873262587045338619827460768


             omega[18] := 26.8885536556100450521832140909


             omega[19] := 26.4142926944075183584704132580


             omega[20] := 26.2814097212080986930366977389


             omega[21] := 26.0646546205154510266478093491


             omega[22] := 23.7694040616105604990538310824


             omega[23] := 22.0543022405448232752071420343


             omega[24] := 18.8798873845065171462237691827


             omega[25] := 15.9140185953899099804198428323


             omega[26] := 13.7269951421884347771802735238


             omega[27] := 11.3680344272539157259884278924


             omega[28] := 8.84063660522202541654940571257


             omega[29] := 3.11568246868556296745339695295


             omega[30] := 6.09067005513551248883985914406

> fclose(res);
> convert(omega,'list'):sort(%);

  [51.4514352115045524295012207260, Float(infinity), Float(infinity),

        Float(infinity), 3.11568246868556296745339695295,

        22.0543022405448232752071420343,

        42.1438521882374464263300900807,

        40.3727646330695932788359221380,

        30.7553877102945365306098484400,

        11.3680344272539157259884278924,

        Float(infinity) + Float(undefined) I,

        33.9623962525125725167895310707,

        18.8798873845065171462237691827,

        36.4728637623482126131984348367,

        26.0646546205154510266478093491,

        6.09067005513551248883985914406,

        44.4355489695009274746029706414,

        26.4142926944075183584704132580,

        37.4620722170192946267954900153,

        15.9140185953899099804198428323,

        27.7873262587045338619827460768,

        28.8945844240131410523434192260,

        8.84063660522202541654940571257,

        31.6100201981667190498436654112,

        61.7402350398297268094311519278,

        13.7269951421884347771802735238,

        26.2814097212080986930366977389,

        30.1813293824642852685402268842,

        23.7694040616105604990538310824,

        26.8885536556100450521832140909]

Formas Modales
Autovalores
> for i from 1 by 1 to 2*(n+m)+L do:
> v[i]:=array(1..2*(n+m)+L,1..1):
> v[i]:= linalg[submatrix](vecs, 1..2*(n+m)+L, i..i):
> end do:
> #print(v[29]):
> #print(vecs);
> print(v[42]); 

                                v[42]

> norm(v[4]);

                   1.00000000000000000000000000000

Forma modal
> for dib from 1 by 1 to 2*(n+m)+L do:
> W1[dib]:=sum(vecs[ii+m,dib]*w1[ii],ii=1..n):
> Phi1[dib]:=sum(vecs[ii,dib]*phi1[ii],ii=1..m):
> W2[dib]:=sum(vecs[ii+m+n+m,dib]*w2[ii],ii=1..n);
> Phi2[dib]:=sum(vecs[ii+m+n,dib]*phi2[ii],ii=1..m);
> end do:
Normalización
> for i from 1 by 1 to 2*(n+m)+L do:
> nL2W1[i]:=int((W1[i])^2,x=0..c[1]):
> nL2W2[i]:=int((W2[i])^2,x=c[1]..1):
> nL2Phi1[i]:=int((Phi1[i])^2,x=0..c[1]):
> nL2Phi2[i]:=int((Phi2[i])^2,x=c[1]..1):
> W1[i]:=W1[i]/(nL2W1[i])^0.5;
> W2[i]:=W2[i]/(nL2W2[i])^0.5;
> Phi1[i]:=Phi1[i]/(nL2Phi1[i])^0.5;
> Phi2[i]:=Phi2[i]/(nL2Phi2[i])^0.5;
> end do:
> WW139:=plot({W1[39]},x=0..c[1]):
> WW239:=plot({W2[39]},x=c[1]..1):
> WW140:=plot({W1[40]},x=0..c[1]):
> WW240:=plot({W2[40]},x=c[1]..1):
> WW141:=plot({W1[41]},x=0..c[1]):
> WW241:=plot({W2[41]},x=c[1]..1):
> WW142:=plot({W1[42]},x=0..c[1]):
> WW242:=plot({W2[42]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> W11x:=plot({diff(W1[dib],x)},x=0..c[1]):
> W11xxx:=plot({diff(W1[dib],x$3)},x=0..c[1]):
> Phi11:=plot({Phi1[dib]},x=0..c[1]):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> 
> W22x:=plot({diff(W2[dib],x)},x=c[1]..1):
> W22xxx:=plot({diff(W2[dib],x$3)},x=c[1]..1):
> Phi22:=plot({Phi21[dib]},x=c[1]..1):
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

> with(plots):
Warning, the name changecoords has been redefined

> evalf(subs(x=0.5,W2[dib]));
> evalf(subs(x=0.5,W1[dib]));
> evalf(subs(x=0.5,Phi2[dib]));
> evalf(subs(x=0.5,Phi1[dib]));

                                W2[31]


                                W1[31]


                               Phi2[31]


                               Phi1[31]

> evalf(subs(x=0.5,Phi1[dib]));

                               Phi1[31]

> #plot({W1[dib],diff(W1[dib],x)},x=0..c[1]);
> #plot({W2[dib]},x=c[1]..1);
> #plot({Phi1[dib]},x=0..c[1]);
> #plot({Phi2[dib]},x=c[1]..1);
> display({WW142,WW242});
> display({WW141,WW241});
> display({WW139,WW239});
> #display({100000*W11xxx,100000*W22xxx});
> #display({W11,W22,W11x,W22x});
Plotting error, empty plot
Plotting error, empty plot
Plotting error, empty plot
Normalizar
> nL2:=int((W1[39])^2,x=0..0.5);

                                                         2
           nL2 := 0.500000000000000000000000000000 W1[39]


          nn := 0.008343975305128818107528826388809051070708

> WN1[39]:=W1[39]/nL2^0.5;

                     1.41421356237309504880168872421 W1[39]
          WN1[39] := --------------------------------------
                                         2 0.5
                                  (W1[39] )

> plot(WN1[39],x=0..0.5);
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Plotting error, empty plot
> plot(W1[39],x=0..0.5);
Warning, unable to evaluate the function to numeric values in the region; see the plotting command's help page to ensure the calling sequence is correct

Plotting error, empty plot
> 
> 
> 
> 
> 
> 
> 
> 
> 
